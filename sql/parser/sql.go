// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:297
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const NOT_REGMATCH = 57357
const REGIMATCH = 57358
const NOT_REGIMATCH = 57359
const ERROR = 57360
const ACTION = 57361
const ADD = 57362
const ALL = 57363
const ALTER = 57364
const ANALYSE = 57365
const ANALYZE = 57366
const AND = 57367
const ANY = 57368
const ANNOTATE_TYPE = 57369
const ARRAY = 57370
const AS = 57371
const ASC = 57372
const ASYMMETRIC = 57373
const AT = 57374
const BEGIN = 57375
const BETWEEN = 57376
const BIGINT = 57377
const BIGSERIAL = 57378
const BIT = 57379
const BLOB = 57380
const BOOL = 57381
const BOOLEAN = 57382
const BOTH = 57383
const BY = 57384
const BYTEA = 57385
const BYTES = 57386
const CASCADE = 57387
const CASE = 57388
const CAST = 57389
const CHAR = 57390
const CHARACTER = 57391
const CHARACTERISTICS = 57392
const CHECK = 57393
const COALESCE = 57394
const COLLATE = 57395
const COLLATION = 57396
const COLUMN = 57397
const COLUMNS = 57398
const COMMIT = 57399
const COMMITTED = 57400
const CONCAT = 57401
const CONFLICT = 57402
const CONSTRAINT = 57403
const CONSTRAINTS = 57404
const COVERING = 57405
const CREATE = 57406
const CROSS = 57407
const CUBE = 57408
const CURRENT = 57409
const CURRENT_CATALOG = 57410
const CURRENT_DATE = 57411
const CURRENT_ROLE = 57412
const CURRENT_TIME = 57413
const CURRENT_TIMESTAMP = 57414
const CURRENT_USER = 57415
const CYCLE = 57416
const DATA = 57417
const DATABASE = 57418
const DATABASES = 57419
const DATE = 57420
const DAY = 57421
const DEC = 57422
const DECIMAL = 57423
const DEFAULT = 57424
const DEALLOCATE = 57425
const DEFERRABLE = 57426
const DELETE = 57427
const DESC = 57428
const DISTINCT = 57429
const DO = 57430
const DOUBLE = 57431
const DROP = 57432
const ELSE = 57433
const ENCODING = 57434
const END = 57435
const ESCAPE = 57436
const EXCEPT = 57437
const EXISTS = 57438
const EXECUTE = 57439
const EXPLAIN = 57440
const EXTRACT = 57441
const FALSE = 57442
const FAMILY = 57443
const FETCH = 57444
const FILTER = 57445
const FIRST = 57446
const FLOAT = 57447
const FLOORDIV = 57448
const FOLLOWING = 57449
const FOR = 57450
const FORCE_INDEX = 57451
const FOREIGN = 57452
const FROM = 57453
const FULL = 57454
const GRANT = 57455
const GRANTS = 57456
const GREATEST = 57457
const GROUP = 57458
const GROUPING = 57459
const HAVING = 57460
const HIGH = 57461
const HOUR = 57462
const IF = 57463
const IFNULL = 57464
const ILIKE = 57465
const IN = 57466
const INTERLEAVE = 57467
const INDEX = 57468
const INDEXES = 57469
const INITIALLY = 57470
const INNER = 57471
const INSERT = 57472
const INT = 57473
const INT64 = 57474
const INTEGER = 57475
const INTERSECT = 57476
const INTERVAL = 57477
const INTO = 57478
const IS = 57479
const ISOLATION = 57480
const JOIN = 57481
const KEY = 57482
const KEYS = 57483
const LATERAL = 57484
const LEADING = 57485
const LEAST = 57486
const LEFT = 57487
const LEVEL = 57488
const LIKE = 57489
const LIMIT = 57490
const LOCAL = 57491
const LOCALTIME = 57492
const LOCALTIMESTAMP = 57493
const LOW = 57494
const LSHIFT = 57495
const MATCH = 57496
const MINUTE = 57497
const MONTH = 57498
const NAME = 57499
const NAMES = 57500
const NATURAL = 57501
const NEXT = 57502
const NO = 57503
const NO_INDEX_JOIN = 57504
const NORMAL = 57505
const NOT = 57506
const NOTHING = 57507
const NULL = 57508
const NULLIF = 57509
const NULLS = 57510
const NUMERIC = 57511
const OF = 57512
const OFF = 57513
const OFFSET = 57514
const ON = 57515
const ONLY = 57516
const OR = 57517
const ORDER = 57518
const ORDINALITY = 57519
const OUT = 57520
const OUTER = 57521
const OVER = 57522
const OVERLAPS = 57523
const OVERLAY = 57524
const PARENT = 57525
const PARTIAL = 57526
const PARTITION = 57527
const PLACING = 57528
const POSITION = 57529
const PRECEDING = 57530
const PRECISION = 57531
const PREPARE = 57532
const PRIMARY = 57533
const PRIORITY = 57534
const RANGE = 57535
const READ = 57536
const REAL = 57537
const RECURSIVE = 57538
const REF = 57539
const REFERENCES = 57540
const RENAME = 57541
const REPEATABLE = 57542
const RELEASE = 57543
const RESTRICT = 57544
const RETURNING = 57545
const REVOKE = 57546
const RIGHT = 57547
const ROLLBACK = 57548
const ROLLUP = 57549
const ROW = 57550
const ROWS = 57551
const RSHIFT = 57552
const SAVEPOINT = 57553
const SEARCH = 57554
const SECOND = 57555
const SELECT = 57556
const SERIAL = 57557
const SERIALIZABLE = 57558
const SESSION = 57559
const SESSION_USER = 57560
const SET = 57561
const SHOW = 57562
const SIMILAR = 57563
const SIMPLE = 57564
const SMALLINT = 57565
const SMALLSERIAL = 57566
const SNAPSHOT = 57567
const SOME = 57568
const SQL = 57569
const START = 57570
const STRICT = 57571
const STRING = 57572
const STORING = 57573
const SUBSTRING = 57574
const SYMMETRIC = 57575
const SYSTEM = 57576
const TABLE = 57577
const TABLES = 57578
const TEXT = 57579
const THEN = 57580
const TIME = 57581
const TIMESTAMP = 57582
const TIMESTAMPTZ = 57583
const TO = 57584
const TRAILING = 57585
const TRANSACTION = 57586
const TREAT = 57587
const TRIM = 57588
const TRUE = 57589
const TRUNCATE = 57590
const TYPE = 57591
const UNBOUNDED = 57592
const UNCOMMITTED = 57593
const UNION = 57594
const UNIQUE = 57595
const UNKNOWN = 57596
const UPDATE = 57597
const UPSERT = 57598
const USER = 57599
const USING = 57600
const VALID = 57601
const VALIDATE = 57602
const VALUE = 57603
const VALUES = 57604
const VARCHAR = 57605
const VARIADIC = 57606
const VARYING = 57607
const WHEN = 57608
const WHERE = 57609
const WINDOW = 57610
const WITH = 57611
const WITHIN = 57612
const WITHOUT = 57613
const YEAR = 57614
const ZONE = 57615
const NOT_LA = 57616
const WITH_LA = 57617
const AS_LA = 57618
const POSTFIXOP = 57619
const UMINUS = 57620

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4695

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	297, 24,
	-2, 360,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 39,
	1, 335,
	173, 335,
	203, 335,
	295, 335,
	297, 335,
	-2, 345,
	-1, 52,
	1, 338,
	173, 338,
	203, 338,
	295, 338,
	297, 338,
	-2, 344,
	-1, 61,
	1, 24,
	297, 24,
	-2, 360,
	-1, 272,
	1, 162,
	297, 162,
	-2, 854,
	-1, 305,
	148, 370,
	172, 370,
	-2, 341,
	-1, 308,
	148, 369,
	172, 369,
	-2, 339,
	-1, 431,
	148, 369,
	172, 369,
	-2, 342,
	-1, 487,
	294, 794,
	-2, 787,
	-1, 488,
	294, 795,
	-2, 788,
	-1, 494,
	5, 504,
	294, 504,
	-2, 941,
	-1, 517,
	5, 470,
	-2, 917,
	-1, 518,
	5, 498,
	294, 498,
	-2, 919,
	-1, 519,
	5, 478,
	-2, 920,
	-1, 520,
	5, 477,
	-2, 921,
	-1, 521,
	5, 498,
	294, 498,
	-2, 924,
	-1, 522,
	5, 498,
	294, 498,
	-2, 925,
	-1, 523,
	5, 499,
	-2, 928,
	-1, 524,
	5, 465,
	-2, 929,
	-1, 525,
	5, 465,
	-2, 930,
	-1, 526,
	5, 480,
	-2, 933,
	-1, 527,
	5, 466,
	-2, 938,
	-1, 528,
	5, 467,
	-2, 939,
	-1, 529,
	5, 468,
	-2, 940,
	-1, 530,
	5, 465,
	-2, 944,
	-1, 531,
	5, 471,
	-2, 949,
	-1, 532,
	5, 469,
	-2, 952,
	-1, 533,
	5, 496,
	294, 496,
	-2, 954,
	-1, 534,
	5, 500,
	-2, 957,
	-1, 535,
	5, 502,
	-2, 958,
	-1, 536,
	5, 495,
	294, 495,
	-2, 962,
	-1, 855,
	95, 345,
	134, 345,
	148, 345,
	172, 345,
	176, 345,
	252, 345,
	-2, 614,
	-1, 863,
	294, 772,
	-2, 761,
	-1, 1054,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 538,
	-1, 1055,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 539,
	-1, 1056,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 540,
	-1, 1060,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 544,
	-1, 1061,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 545,
	-1, 1062,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 546,
	-1, 1065,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 551,
	-1, 1071,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 553,
	-1, 1074,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 558,
	-1, 1075,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 559,
	-1, 1076,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 560,
	-1, 1101,
	181, 685,
	-2, 688,
	-1, 1264,
	95, 345,
	134, 345,
	148, 345,
	172, 345,
	176, 345,
	252, 345,
	-2, 418,
	-1, 1268,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 552,
	-1, 1269,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 554,
	-1, 1274,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 555,
	-1, 1292,
	181, 684,
	-2, 687,
	-1, 1451,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 556,
	-1, 1456,
	137, 0,
	-2, 570,
	-1, 1464,
	181, 686,
	-2, 689,
	-1, 1497,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 595,
	-1, 1498,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 596,
	-1, 1499,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 597,
	-1, 1503,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 601,
	-1, 1504,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 602,
	-1, 1505,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 603,
	-1, 1611,
	137, 0,
	-2, 571,
	-1, 1614,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 574,
	-1, 1615,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 576,
	-1, 1702,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 575,
	-1, 1703,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 577,
	-1, 1710,
	137, 0,
	-2, 604,
	-1, 1756,
	137, 0,
	-2, 605,
	-1, 1809,
	34, 0,
	123, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 916,
}

const sqlNprod = 1056
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 23493

var sqlAct = [...]int{

	488, 1808, 1832, 1788, 1790, 937, 1418, 1762, 1807, 578,
	1789, 1654, 486, 1150, 945, 1475, 807, 1603, 309, 454,
	485, 478, 1584, 1027, 1535, 1690, 1036, 1597, 1574, 591,
	1677, 38, 1575, 85, 85, 85, 858, 1347, 85, 331,
	1590, 85, 785, 680, 1261, 86, 1010, 1430, 537, 85,
	1193, 1260, 1346, 788, 1009, 1007, 85, 85, 1295, 273,
	85, 558, 450, 85, 85, 85, 1440, 1251, 555, 85,
	85, 85, 85, 1035, 357, 946, 1147, 549, 860, 17,
	1245, 922, 1111, 1084, 913, 1039, 314, 1087, 803, 969,
	654, 419, 960, 592, 316, 51, 23, 1199, 1037, 1002,
	638, 560, 460, 13, 420, 314, 976, 451, 6, 550,
	635, 74, 308, 461, 551, 894, 665, 354, 347, 358,
	8, 7, 359, 5, 72, 4, 51, 890, 79, 350,
	1013, 352, 939, 349, 809, 78, 434, 319, 435, 634,
	80, 433, 260, 656, 652, 251, 317, 571, 438, 580,
	343, 1697, 81, 76, 1698, 75, 51, 77, 327, 942,
	973, 334, 480, 580, 52, 1839, 580, 344, 1031, 1824,
	53, 938, 1031, 328, 1805, 313, 328, 1676, 339, 313,
	1796, 1259, 328, 1031, 339, 1786, 1781, 1206, 966, 1031,
	355, 298, 812, 1758, 1752, 1290, 966, 1031, 337, 569,
	1291, 974, 1205, 321, 1741, 1731, 270, 1676, 1031, 1704,
	1701, 979, 966, 1031, 814, 1687, 306, 1746, 1676, 811,
	539, 1684, 305, 1675, 1685, 1659, 1676, 810, 1031, 57,
	1318, 1248, 1335, 1336, 1337, 813, 975, 972, 1658, 1636,
	1616, 1031, 979, 979, 1510, 1610, 1613, 85, 1547, 966,
	59, 1031, 1460, 1404, 1397, 979, 1398, 1398, 1364, 1249,
	1362, 1365, 85, 979, 538, 85, 85, 1361, 1360, 1463,
	979, 979, 82, 1292, 812, 1289, 979, 60, 1679, 1332,
	979, 1248, 1032, 988, 55, 1031, 979, 1231, 819, 978,
	56, 57, 979, 911, 977, 1233, 814, 1294, 85, 1031,
	85, 979, 85, 981, 85, 965, 581, 910, 966, 54,
	909, 1095, 59, 586, 50, 1026, 587, 813, 996, 85,
	581, 446, 493, 581, 432, 552, 1323, 778, 445, 553,
	85, 541, 777, 646, 645, 829, 383, 326, 61, 60,
	30, 85, 85, 85, 553, 85, 55, 552, 31, 679,
	403, 553, 56, 971, 1806, 1803, 1795, 1338, 1753, 391,
	583, 426, 1686, 1641, 431, 1637, 544, 548, 1629, 1628,
	819, 941, 392, 1333, 1205, 970, 85, 1627, 57, 1622,
	1621, 1620, 1572, 85, 1525, 85, 543, 1520, 1519, 1518,
	1565, 1466, 830, 632, 1449, 1429, 357, 357, 425, 59,
	1425, 1408, 584, 644, 682, 85, 810, 85, 85, 85,
	85, 85, 85, 328, 85, 1369, 579, 1366, 85, 781,
	1354, 1345, 1317, 85, 1314, 1312, 60, 1300, 1299, 85,
	1334, 1232, 1235, 1164, 780, 1118, 1117, 1092, 866, 344,
	423, 358, 358, 546, 359, 359, 445, 85, 444, 683,
	85, 783, 684, 1798, 328, 572, 572, 798, 54, 1477,
	441, 442, 1772, 1745, 57, 447, 823, 815, 816, 817,
	818, 820, 1723, 840, 588, 1721, 861, 1712, 857, 1694,
	1682, 306, 1673, 1651, 1634, 59, 1318, 305, 1606, 328,
	573, 570, 1582, 1455, 1448, 1426, 314, 1329, 1330, 1331,
	1423, 1328, 1325, 1326, 1327, 1319, 1320, 1321, 1322, 1324,
	863, 1564, 60, 1421, 812, 1406, 1381, 552, 1380, 55,
	1344, 553, 1308, 1093, 642, 56, 1307, 1286, 1282, 641,
	1089, 1318, 1220, 1178, 1177, 1157, 814, 1116, 812, 1030,
	598, 669, 676, 895, 54, 898, 768, 902, 85, 815,
	816, 817, 818, 820, 682, 840, 1318, 813, 1214, 888,
	814, 675, 85, 828, 887, 779, 85, 886, 885, 85,
	85, 884, 793, 792, 791, 85, 883, 85, 85, 812,
	85, 813, 1323, 85, 805, 85, 85, 882, 357, 881,
	540, 880, 1133, 879, 878, 877, 876, 907, 620, 683,
	1178, 814, 684, 306, 875, 874, 306, 306, 916, 799,
	819, 765, 800, 801, 769, 770, 771, 772, 773, 873,
	774, 864, 813, 862, 776, 54, 905, 1323, 332, 1333,
	449, 389, 379, 358, 377, 1571, 359, 85, 85, 1570,
	418, 896, 619, 1213, 955, 352, 899, 927, 929, 892,
	893, 940, 1323, 940, 983, 545, 812, 829, 1699, 490,
	1569, 904, 1207, 1021, 932, 1424, 74, 1368, 397, 900,
	961, 1318, 1367, 901, 1333, 819, 1267, 812, 903, 328,
	682, 51, 339, 79, 414, 51, 1334, 963, 949, 398,
	78, 871, 919, 339, 962, 80, 339, 1591, 938, 964,
	597, 954, 935, 1478, 355, 958, 944, 81, 76, 622,
	75, 957, 77, 953, 830, 956, 782, 1303, 1112, 891,
	813, 1201, 829, 1001, 1768, 683, 812, 867, 684, 1819,
	896, 1334, 899, 65, 1227, 1820, 1730, 1555, 990, 303,
	297, 987, 296, 263, 291, 292, 1692, 982, 814, 984,
	989, 1667, 1666, 973, 985, 1393, 893, 892, 1325, 1326,
	1327, 1319, 1320, 1321, 1322, 1324, 1373, 1323, 85, 813,
	561, 82, 562, 1372, 915, 812, 1270, 1219, 66, 830,
	1392, 1218, 85, 85, 923, 824, 821, 822, 823, 815,
	816, 817, 818, 820, 974, 840, 1217, 814, 561, 395,
	562, 1405, 1328, 1325, 1326, 1327, 1319, 1320, 1321, 1322,
	1324, 1161, 85, 50, 85, 1033, 812, 1216, 813, 840,
	1072, 980, 819, 934, 933, 422, 1729, 1160, 1043, 975,
	972, 1319, 1320, 1321, 1322, 1324, 396, 417, 814, 30,
	563, 375, 300, 926, 1594, 1086, 1770, 31, 682, 1086,
	824, 821, 822, 823, 815, 816, 817, 818, 820, 813,
	840, 674, 673, 1017, 667, 662, 574, 977, 563, 829,
	1005, 819, 312, 1042, 1783, 1096, 1100, 1829, 1103, 1123,
	1006, 1194, 1004, 915, 1724, 1024, 1025, 977, 1395, 914,
	1784, 1090, 1112, 683, 1142, 328, 684, 1656, 301, 1134,
	1154, 1155, 1156, 68, 67, 1819, 1041, 1383, 1203, 1163,
	1192, 311, 819, 85, 85, 85, 304, 1792, 1034, 85,
	567, 561, 85, 562, 925, 328, 830, 1226, 85, 85,
	85, 85, 85, 421, 85, 85, 905, 840, 1318, 677,
	1099, 905, 85, 69, 85, 566, 971, 1228, 1321, 1322,
	1324, 85, 580, 313, 1126, 394, 1108, 1091, 840, 829,
	85, 1390, 889, 57, 1209, 1173, 1210, 1413, 621, 1708,
	1674, 63, 854, 314, 393, 598, 1306, 1189, 1167, 1441,
	1828, 85, 85, 313, 59, 1069, 924, 85, 1791, 1793,
	1196, 563, 626, 70, 1188, 1127, 1818, 357, 821, 822,
	823, 815, 816, 817, 818, 820, 678, 840, 386, 388,
	564, 60, 1835, 1168, 1175, 85, 830, 85, 55, 85,
	85, 64, 1816, 85, 56, 977, 1169, 1794, 394, 310,
	1128, 1125, 85, 620, 1323, 1543, 1384, 594, 564, 85,
	437, 85, 358, 73, 1589, 359, 1661, 1272, 1208, 1019,
	252, 1085, 817, 818, 820, 1200, 840, 1234, 1211, 1236,
	1212, 1827, 406, 415, 1200, 1657, 1544, 1266, 249, 384,
	912, 257, 314, 328, 1067, 1070, 253, 619, 1237, 1225,
	1222, 1333, 1223, 598, 1198, 382, 1224, 1229, 1129, 436,
	1230, 815, 816, 817, 818, 820, 1410, 840, 1066, 254,
	559, 1506, 71, 1285, 1134, 1134, 1434, 1287, 1845, 581,
	961, 252, 1660, 437, 1194, 1242, 256, 416, 992, 1297,
	1298, 314, 1293, 1243, 994, 51, 1265, 963, 1833, 598,
	62, 1411, 257, 1238, 962, 597, 1632, 253, 1334, 964,
	995, 620, 668, 663, 622, 1649, 1279, 1124, 1539, 993,
	1540, 1551, 1343, 1271, 328, 1134, 1134, 1134, 1273, 1277,
	254, 564, 1718, 1356, 1375, 651, 1554, 1172, 1082, 1834,
	314, 1020, 1068, 1553, 790, 1542, 784, 256, 1507, 85,
	1409, 1080, 1545, 1763, 1508, 619, 1836, 620, 436, 977,
	775, 1254, 1844, 1302, 1387, 1379, 1389, 1604, 649, 647,
	255, 1650, 1180, 1179, 1600, 1436, 85, 85, 1257, 650,
	1400, 1435, 1327, 1319, 1320, 1321, 1322, 1324, 1439, 1633,
	393, 1351, 1352, 1353, 1255, 1275, 342, 311, 341, 1280,
	428, 619, 85, 1550, 85, 1419, 85, 1541, 1573, 1431,
	85, 258, 1647, 597, 1370, 1078, 1246, 1077, 1115, 85,
	1605, 1083, 622, 85, 1711, 1552, 1631, 1394, 1377, 85,
	682, 255, 1648, 85, 1348, 85, 1399, 1454, 1313, 1281,
	986, 413, 411, 1188, 1391, 1433, 1403, 410, 1422, 1437,
	1402, 1401, 409, 408, 1256, 407, 404, 340, 1420, 597,
	1349, 1134, 1134, 872, 767, 1428, 1114, 1787, 622, 1760,
	1461, 1532, 258, 1445, 1388, 683, 1276, 85, 684, 1386,
	1444, 1374, 1457, 1278, 1239, 1468, 1469, 1470, 1022, 949,
	328, 1438, 1442, 1443, 1412, 1414, 1415, 1018, 1079, 959,
	585, 582, 577, 568, 565, 1081, 1472, 789, 1668, 1134,
	1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
	1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1511, 1134,
	439, 324, 328, 1820, 1028, 671, 328, 1479, 1484, 1521,
	1465, 915, 915, 85, 85, 85, 3, 930, 928, 400,
	1670, 85, 85, 931, 1513, 1396, 1679, 85, 1726, 85,
	1755, 85, 85, 85, 85, 1432, 443, 1548, 1549, 85,
	1514, 1747, 943, 621, 1481, 1482, 806, 643, 590, 968,
	1842, 1843, 1486, 1318, 812, 998, 997, 1526, 1527, 473,
	1029, 1531, 1250, 1416, 85, 85, 440, 325, 1407, 1363,
	248, 1215, 1162, 1159, 1580, 1158, 85, 85, 333, 1580,
	85, 1109, 1579, 1581, 1517, 598, 1593, 1579, 1581, 85,
	85, 1568, 83, 244, 245, 1588, 401, 262, 1562, 999,
	274, 290, 1595, 1596, 1748, 1607, 1601, 259, 262, 1254,
	1618, 1471, 594, 598, 598, 320, 320, 1566, 85, 330,
	1586, 598, 330, 336, 330, 1612, 1257, 1240, 330, 345,
	330, 274, 1000, 865, 1608, 299, 1252, 1655, 250, 766,
	405, 1624, 1255, 620, 1558, 1587, 1782, 293, 294, 1305,
	1707, 621, 1567, 598, 1689, 1113, 1253, 870, 29, 1577,
	466, 1533, 1630, 1376, 1012, 1011, 685, 672, 661, 489,
	412, 620, 620, 85, 655, 85, 664, 85, 85, 620,
	1122, 542, 491, 595, 492, 596, 85, 619, 897, 328,
	328, 479, 593, 328, 353, 1247, 947, 621, 1110, 1301,
	868, 465, 1256, 471, 1134, 85, 1664, 1665, 1642, 470,
	1097, 620, 376, 462, 1602, 619, 619, 1258, 41, 1643,
	594, 1669, 390, 619, 268, 269, 1197, 1563, 1023, 794,
	85, 1385, 85, 302, 1315, 1580, 1645, 378, 1140, 1132,
	1130, 85, 1121, 1579, 1581, 597, 424, 85, 1680, 1671,
	554, 1683, 948, 1678, 622, 619, 402, 1204, 598, 967,
	448, 1583, 802, 1700, 1693, 1797, 594, 1696, 323, 322,
	1008, 399, 648, 597, 597, 991, 295, 1720, 1706, 1725,
	1382, 597, 622, 622, 1767, 58, 22, 20, 85, 1663,
	622, 1134, 19, 18, 16, 15, 14, 21, 12, 1653,
	11, 1722, 10, 9, 1713, 28, 380, 85, 85, 1716,
	27, 85, 26, 597, 25, 85, 620, 1283, 1284, 2,
	85, 385, 622, 1, 274, 274, 85, 1734, 0, 1580,
	1717, 0, 0, 1743, 0, 85, 1740, 1579, 1581, 1744,
	682, 1736, 0, 1688, 1738, 314, 0, 0, 1742, 1735,
	0, 1749, 0, 0, 328, 1750, 0, 262, 598, 330,
	619, 274, 85, 429, 85, 85, 1754, 85, 1340, 1341,
	1342, 1134, 0, 0, 0, 0, 0, 1771, 320, 1737,
	1765, 1773, 1757, 1751, 0, 683, 0, 85, 684, 330,
	0, 1777, 0, 1776, 1318, 0, 905, 0, 1580, 1775,
	330, 330, 330, 1780, 575, 0, 1579, 1581, 0, 1785,
	1774, 85, 1779, 85, 1778, 0, 620, 0, 597, 0,
	0, 0, 0, 1804, 0, 1800, 1769, 622, 85, 1801,
	0, 0, 0, 1813, 1815, 330, 0, 598, 1802, 85,
	1318, 1817, 639, 0, 639, 1821, 1823, 0, 0, 0,
	0, 1826, 0, 0, 0, 1822, 0, 1825, 0, 0,
	619, 0, 0, 1837, 274, 1838, 639, 274, 274, 274,
	274, 274, 1841, 274, 1840, 0, 0, 274, 1766, 0,
	0, 0, 262, 0, 1846, 0, 0, 0, 787, 1332,
	1323, 0, 0, 0, 0, 620, 0, 0, 0, 0,
	0, 1543, 0, 1536, 1452, 1453, 320, 0, 0, 808,
	0, 1534, 0, 621, 1538, 598, 0, 0, 597, 0,
	0, 0, 0, 0, 949, 0, 0, 622, 0, 0,
	0, 0, 1544, 0, 0, 0, 1323, 1333, 0, 619,
	0, 621, 621, 0, 0, 0, 0, 0, 0, 621,
	0, 1537, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 0, 1509, 620, 0, 0, 0, 0, 0, 0,
	0, 621, 594, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1334, 0, 0, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 330, 0, 0,
	594, 594, 0, 0, 1539, 0, 1540, 619, 594, 0,
	0, 920, 0, 0, 0, 330, 0, 0, 330, 936,
	1250, 0, 0, 0, 330, 0, 951, 952, 0, 330,
	1334, 1542, 330, 0, 274, 274, 0, 0, 1545, 0,
	594, 0, 812, 0, 831, 832, 833, 841, 842, 843,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 1319,
	1320, 1321, 1322, 1324, 814, 597, 845, 1254, 0, 0,
	0, 0, 0, 0, 622, 812, 621, 831, 832, 833,
	841, 842, 843, 0, 1257, 813, 639, 808, 0, 0,
	834, 828, 0, 1541, 1252, 0, 0, 814, 0, 845,
	1255, 1328, 1325, 1326, 1327, 1319, 1320, 1321, 1322, 1324,
	0, 0, 0, 0, 1253, 0, 0, 0, 813, 0,
	0, 633, 0, 0, 828, 0, 0, 0, 1599, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 819, 0,
	0, 0, 0, 0, 0, 594, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 838, 846, 0, 0, 0,
	1256, 0, 0, 0, 0, 0, 0, 1652, 0, 844,
	0, 819, 0, 0, 0, 0, 621, 0, 0, 836,
	0, 0, 0, 0, 0, 829, 0, 0, 838, 846,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 844, 0, 467, 39, 0, 835, 0, 0,
	0, 0, 836, 1598, 0, 0, 0, 1003, 829, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 920, 0, 0, 0, 39, 0, 0, 0,
	835, 0, 830, 0, 0, 594, 0, 0, 0, 0,
	0, 0, 0, 839, 1710, 621, 307, 0, 0, 315,
	0, 330, 0, 274, 0, 0, 39, 0, 0, 0,
	0, 0, 0, 0, 0, 830, 0, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 839, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 825,
	826, 827, 0, 824, 821, 822, 823, 815, 816, 817,
	818, 820, 0, 840, 594, 0, 0, 0, 0, 0,
	1638, 0, 0, 621, 1756, 0, 0, 0, 0, 837,
	0, 0, 825, 826, 827, 0, 824, 821, 822, 823,
	815, 816, 817, 818, 820, 0, 840, 0, 1165, 0,
	0, 0, 330, 1170, 1171, 0, 0, 1166, 920, 275,
	0, 1176, 0, 0, 0, 0, 0, 1181, 1182, 1184,
	1186, 1187, 0, 1190, 1191, 0, 288, 0, 0, 0,
	0, 330, 0, 1202, 0, 0, 0, 0, 0, 0,
	330, 0, 594, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 282, 283, 0, 289,
	1003, 639, 0, 0, 0, 0, 1003, 0, 0, 0,
	0, 276, 278, 0, 452, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 787, 0, 787, 0, 274, 330,
	0, 812, 1241, 831, 832, 833, 841, 842, 843, 279,
	0, 1244, 0, 0, 0, 0, 834, 0, 1263, 0,
	330, 280, 281, 814, 0, 845, 0, 0, 0, 610,
	605, 627, 599, 618, 617, 0, 284, 601, 600, 0,
	0, 0, 629, 628, 813, 0, 0, 0, 0, 0,
	828, 307, 0, 0, 0, 812, 0, 831, 832, 833,
	841, 842, 843, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 623, 0, 615, 614, 0, 814, 0, 845,
	0, 0, 0, 613, 0, 0, 0, 0, 795, 797,
	0, 0, 0, 0, 0, 804, 0, 819, 813, 612,
	0, 0, 0, 0, 828, 0, 0, 849, 850, 851,
	852, 853, 0, 0, 838, 846, 856, 0, 1318, 0,
	1335, 1336, 1337, 0, 0, 606, 607, 608, 844, 626,
	0, 285, 0, 1609, 286, 0, 869, 0, 836, 287,
	0, 0, 0, 0, 829, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 0, 616, 0, 0, 835, 1332, 838, 846,
	0, 0, 0, 307, 0, 0, 307, 307, 0, 0,
	0, 0, 844, 0, 0, 330, 330, 0, 0, 611,
	0, 0, 836, 0, 0, 0, 0, 0, 829, 855,
	0, 830, 0, 859, 906, 0, 0, 0, 0, 603,
	0, 1417, 839, 920, 1323, 787, 0, 609, 604, 1427,
	835, 0, 0, 0, 631, 0, 0, 0, 330, 0,
	0, 602, 330, 0, 624, 625, 0, 0, 1263, 0,
	0, 0, 1447, 0, 1263, 1338, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 830, 0, 630, 0, 0,
	0, 1333, 0, 0, 0, 837, 839, 0, 825, 826,
	827, 0, 824, 821, 822, 823, 815, 816, 817, 818,
	820, 0, 840, 0, 0, 0, 1476, 0, 0, 1359,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 39, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1334, 837,
	0, 39, 825, 826, 827, 39, 824, 821, 822, 823,
	815, 816, 817, 818, 820, 0, 840, 0, 0, 0,
	0, 0, 0, 1358, 0, 0, 0, 0, 0, 0,
	0, 0, 1529, 1530, 920, 0, 0, 0, 0, 0,
	808, 808, 0, 0, 0, 0, 1556, 0, 1557, 0,
	330, 1559, 1560, 1561, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 0, 0, 1329, 1330, 1331, 0, 1328,
	1325, 1326, 1327, 1319, 1320, 1321, 1322, 1324, 0, 0,
	0, 1576, 0, 1585, 920, 0, 1576, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 330, 0, 0, 330,
	0, 0, 0, 0, 0, 0, 0, 0, 808, 1263,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1625, 0, 0,
	0, 0, 452, 0, 0, 0, 0, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 0,
	1071, 0, 1073, 1074, 1075, 1076, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 920, 0, 1644, 0, 274, 1646, 39, 0,
	0, 0, 0, 0, 0, 330, 0, 1119, 1120, 0,
	1131, 0, 1141, 1143, 1148, 1151, 1152, 1153, 0, 0,
	0, 0, 0, 0, 808, 0, 1038, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 556, 1576, 0, 0, 0, 0, 0, 0, 330,
	0, 1691, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 1088, 0, 0, 0, 0, 808, 0, 0, 0,
	1195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 812, 0, 831, 832, 833, 841,
	842, 843, 0, 0, 0, 0, 0, 787, 0, 834,
	0, 1221, 0, 0, 0, 0, 814, 1318, 845, 1335,
	1336, 1337, 0, 0, 0, 0, 1727, 1728, 0, 0,
	1732, 0, 0, 0, 1733, 0, 1576, 813, 0, 274,
	0, 0, 0, 828, 0, 1585, 0, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 315, 0, 804, 0,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1764, 0, 808, 330, 0, 274, 0, 0, 0,
	819, 0, 0, 0, 0, 0, 0, 0, 1268, 1269,
	0, 0, 0, 0, 1274, 1576, 1691, 838, 846, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 844, 0, 0, 0, 0, 0, 1288, 0, 0,
	330, 836, 808, 0, 0, 0, 1296, 829, 0, 0,
	0, 0, 0, 0, 1304, 39, 0, 1814, 1309, 0,
	0, 0, 0, 0, 0, 1264, 0, 0, 808, 835,
	1333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	856, 0, 0, 0, 0, 0, 1148, 1148, 1148, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 830, 0, 0, 0, 1371, 0,
	0, 812, 0, 0, 855, 839, 841, 842, 843, 1378,
	0, 0, 0, 0, 0, 0, 0, 1334, 0, 0,
	0, 0, 0, 814, 0, 845, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 452, 0, 0, 0, 556,
	0, 0, 0, 0, 813, 0, 0, 0, 0, 0,
	828, 0, 0, 855, 0, 0, 0, 0, 837, 0,
	0, 825, 826, 827, 0, 824, 821, 822, 823, 815,
	816, 817, 818, 820, 0, 840, 0, 0, 0, 0,
	0, 0, 1357, 0, 1329, 1330, 1331, 0, 1328, 1325,
	1326, 1327, 1319, 1320, 1321, 1322, 1324, 819, 0, 1450,
	0, 0, 1451, 812, 0, 831, 832, 833, 841, 842,
	843, 0, 0, 1456, 838, 846, 0, 0, 834, 0,
	0, 1038, 0, 0, 0, 814, 1221, 845, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 0, 836, 0,
	0, 0, 0, 0, 829, 1483, 813, 0, 1485, 0,
	0, 0, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1038, 0, 0, 0, 1038, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1515, 1516, 0, 0, 0, 0, 0, 0, 0, 1522,
	1523, 1524, 0, 0, 0, 0, 0, 0, 0, 819,
	1318, 830, 1335, 1336, 1337, 0, 0, 0, 0, 0,
	0, 0, 839, 0, 0, 1459, 838, 846, 0, 0,
	1318, 0, 1335, 1336, 1337, 0, 0, 452, 0, 0,
	844, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 829, 0, 0, 1332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1592, 0, 837, 0, 0, 835, 1332,
	0, 0, 824, 821, 822, 823, 815, 816, 817, 818,
	820, 0, 840, 0, 0, 0, 1611, 0, 0, 0,
	1614, 1615, 0, 0, 0, 1617, 1323, 0, 0, 1619,
	0, 0, 0, 830, 0, 0, 1623, 0, 0, 0,
	1626, 0, 39, 0, 839, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	39, 0, 1635, 1333, 0, 0, 0, 1338, 0, 0,
	1038, 1038, 0, 0, 1038, 0, 0, 0, 1318, 0,
	1335, 1336, 1337, 1333, 0, 0, 0, 837, 0, 0,
	825, 826, 827, 0, 824, 821, 822, 823, 815, 816,
	817, 818, 820, 0, 840, 1662, 0, 0, 0, 0,
	812, 1311, 831, 832, 833, 841, 842, 843, 0, 0,
	1334, 0, 0, 0, 0, 834, 0, 1332, 0, 0,
	1681, 0, 814, 0, 845, 0, 0, 0, 0, 0,
	1334, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1695, 0, 813, 0, 0, 0, 0, 0, 828,
	0, 1702, 1703, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1329, 1330, 1331,
	1715, 1328, 1325, 1326, 1327, 1319, 1320, 1321, 1322, 1324,
	0, 0, 0, 1719, 1672, 1338, 819, 1329, 1330, 1331,
	0, 1328, 1325, 1326, 1327, 1319, 1320, 1321, 1322, 1324,
	0, 1333, 0, 838, 846, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1038, 0, 844, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 829, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 1334, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 855, 0,
	830, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1799, 839, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1812, 1812, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 1330, 1331, 0, 1328,
	1325, 1326, 1327, 1319, 1320, 1321, 1322, 1324, 0, 0,
	0, 1812, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 837, 0, 0, 825, 826, 827,
	681, 824, 821, 822, 823, 815, 816, 817, 818, 820,
	0, 840, 0, 1528, 1812, 87, 88, 686, 89, 687,
	688, 689, 690, 196, 691, 692, 693, 694, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 695, 93, 203,
	204, 94, 696, 697, 205, 206, 207, 698, 208, 699,
	361, 700, 95, 96, 97, 0, 98, 701, 99, 100,
	702, 362, 101, 102, 703, 704, 705, 706, 707, 708,
	103, 104, 105, 106, 209, 107, 210, 211, 709, 108,
	710, 109, 711, 712, 713, 110, 111, 714, 112, 715,
	0, 716, 212, 113, 114, 213, 717, 718, 719, 115,
	116, 214, 0, 117, 720, 118, 721, 722, 363, 723,
	119, 215, 724, 216, 725, 120, 121, 217, 218, 365,
	726, 124, 727, 122, 728, 364, 123, 219, 220, 221,
	729, 222, 730, 366, 125, 367, 126, 127, 731, 732,
	223, 368, 128, 369, 733, 129, 734, 735, 130, 0,
	131, 132, 133, 134, 135, 370, 136, 137, 140, 138,
	736, 139, 737, 224, 141, 225, 142, 143, 738, 739,
	740, 741, 742, 144, 226, 371, 145, 372, 227, 146,
	147, 148, 743, 228, 149, 229, 150, 744, 151, 152,
	153, 230, 154, 155, 745, 157, 158, 156, 159, 746,
	160, 373, 161, 162, 231, 163, 0, 164, 165, 166,
	747, 232, 167, 168, 748, 169, 170, 374, 171, 233,
	234, 172, 749, 173, 174, 176, 235, 175, 236, 750,
	177, 751, 178, 179, 752, 237, 238, 239, 753, 754,
	180, 240, 241, 755, 181, 182, 183, 184, 756, 757,
	185, 186, 187, 758, 759, 188, 189, 190, 242, 243,
	760, 191, 761, 762, 763, 764, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 681, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 87, 88, 686,
	89, 687, 688, 689, 690, 196, 691, 692, 693, 694,
	90, 91, 197, 198, 199, 200, 92, 201, 202, 695,
	93, 203, 204, 94, 696, 697, 205, 206, 207, 698,
	208, 699, 361, 700, 95, 96, 97, 0, 98, 701,
	99, 100, 702, 362, 101, 102, 703, 704, 705, 706,
	707, 708, 103, 104, 105, 106, 209, 107, 210, 211,
	709, 108, 710, 109, 711, 712, 713, 110, 111, 714,
	112, 715, 0, 716, 212, 113, 114, 213, 717, 718,
	719, 115, 116, 214, 0, 117, 720, 118, 721, 722,
	363, 723, 119, 215, 724, 216, 725, 120, 121, 217,
	218, 365, 726, 124, 727, 122, 728, 364, 123, 219,
	220, 221, 729, 222, 730, 366, 125, 367, 126, 127,
	731, 732, 223, 368, 128, 369, 733, 129, 734, 735,
	130, 0, 131, 132, 133, 134, 135, 370, 136, 137,
	140, 138, 736, 139, 737, 224, 141, 225, 142, 143,
	738, 739, 740, 741, 742, 144, 226, 371, 145, 372,
	227, 146, 147, 148, 743, 228, 149, 229, 150, 744,
	151, 152, 153, 230, 154, 155, 745, 157, 158, 156,
	159, 746, 160, 373, 161, 162, 231, 163, 0, 164,
	165, 166, 747, 232, 167, 168, 748, 169, 170, 374,
	171, 233, 234, 172, 749, 173, 174, 176, 235, 175,
	236, 750, 177, 751, 178, 179, 752, 237, 238, 239,
	753, 754, 180, 240, 241, 755, 181, 182, 183, 184,
	756, 757, 185, 186, 187, 758, 759, 188, 189, 190,
	242, 243, 760, 191, 761, 762, 763, 764, 192, 193,
	194, 195, 681, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 908, 0, 87, 88, 686,
	89, 687, 688, 689, 690, 196, 691, 692, 693, 694,
	90, 91, 197, 198, 199, 200, 92, 201, 202, 695,
	93, 203, 204, 94, 696, 697, 205, 206, 207, 698,
	208, 699, 361, 700, 95, 96, 97, 0, 98, 701,
	99, 100, 702, 362, 101, 102, 703, 704, 705, 706,
	707, 708, 103, 104, 105, 106, 209, 107, 210, 211,
	709, 108, 710, 109, 711, 712, 713, 110, 111, 714,
	112, 715, 0, 716, 212, 113, 114, 213, 717, 718,
	719, 115, 116, 214, 0, 117, 720, 118, 721, 722,
	363, 723, 119, 215, 724, 216, 725, 120, 121, 217,
	218, 365, 726, 124, 727, 122, 728, 364, 123, 219,
	220, 221, 729, 222, 730, 366, 125, 367, 126, 127,
	731, 732, 223, 368, 128, 369, 733, 129, 734, 735,
	130, 0, 131, 132, 133, 134, 135, 370, 136, 137,
	140, 138, 736, 139, 737, 224, 141, 225, 142, 143,
	738, 739, 740, 741, 742, 144, 226, 371, 145, 372,
	227, 146, 147, 148, 743, 228, 149, 229, 150, 744,
	151, 152, 153, 230, 154, 155, 745, 157, 158, 156,
	159, 746, 160, 373, 161, 162, 231, 163, 0, 164,
	165, 166, 747, 232, 167, 168, 748, 169, 170, 374,
	171, 233, 234, 172, 749, 173, 174, 176, 235, 175,
	236, 750, 177, 751, 178, 179, 752, 237, 238, 239,
	753, 754, 180, 240, 241, 755, 181, 182, 183, 184,
	756, 757, 185, 186, 187, 758, 759, 188, 189, 190,
	242, 243, 760, 191, 761, 762, 763, 764, 192, 193,
	194, 195, 487, 476, 477, 474, 475, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 1105,
	89, 0, 0, 0, 0, 503, 469, 0, 0, 0,
	90, 91, 197, 517, 199, 518, 92, 519, 520, 0,
	93, 203, 204, 94, 484, 502, 521, 522, 207, 0,
	513, 0, 495, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 0, 362, 101, 102, 0, 496, 498, 0,
	497, 499, 103, 104, 105, 106, 523, 107, 524, 525,
	0, 108, 0, 109, 0, 1106, 0, 516, 111, 0,
	112, 0, 0, 0, 468, 113, 114, 504, 482, 0,
	0, 115, 116, 526, 0, 117, 0, 118, 0, 0,
	363, 0, 119, 514, 0, 216, 0, 120, 121, 510,
	512, 365, 0, 124, 0, 122, 0, 364, 123, 527,
	528, 529, 0, 494, 0, 366, 125, 367, 126, 127,
	0, 0, 515, 368, 128, 369, 0, 129, 0, 0,
	130, 0, 131, 132, 133, 134, 135, 370, 136, 137,
	140, 138, 458, 139, 483, 511, 141, 530, 142, 143,
	0, 0, 0, 0, 0, 144, 226, 371, 145, 372,
	505, 146, 147, 148, 0, 506, 149, 229, 150, 0,
	151, 152, 153, 531, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 373, 161, 162, 472, 163, 0, 164,
	165, 166, 0, 232, 167, 168, 500, 169, 170, 374,
	171, 532, 234, 172, 0, 173, 174, 176, 533, 175,
	507, 0, 177, 0, 178, 179, 0, 237, 534, 535,
	0, 0, 180, 508, 509, 481, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 501, 0, 188, 189, 190,
	242, 536, 1104, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 455, 456, 1107, 0, 0, 0, 457,
	0, 0, 464, 1102, 487, 476, 477, 474, 475, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 503, 469, 0,
	0, 0, 90, 91, 197, 517, 199, 518, 92, 519,
	520, 0, 93, 203, 204, 94, 484, 502, 521, 522,
	207, 0, 513, 0, 495, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 362, 101, 102, 0, 496,
	498, 0, 497, 499, 103, 104, 105, 106, 523, 107,
	524, 525, 557, 108, 0, 109, 0, 0, 0, 516,
	111, 0, 112, 0, 0, 0, 468, 113, 114, 504,
	482, 0, 0, 115, 116, 526, 0, 117, 0, 118,
	0, 0, 363, 0, 119, 514, 0, 216, 0, 120,
	121, 510, 512, 365, 0, 124, 0, 122, 0, 364,
	123, 527, 528, 529, 0, 494, 0, 366, 125, 367,
	126, 127, 0, 0, 515, 368, 128, 369, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 370,
	136, 137, 140, 138, 458, 139, 483, 511, 141, 530,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 371,
	145, 372, 505, 146, 147, 148, 0, 506, 149, 229,
	150, 0, 151, 152, 153, 531, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 373, 161, 162, 472, 163,
	0, 164, 165, 166, 57, 232, 167, 168, 500, 169,
	170, 374, 171, 532, 234, 172, 0, 173, 174, 176,
	533, 175, 507, 0, 177, 59, 178, 179, 0, 237,
	534, 535, 0, 0, 180, 508, 509, 481, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 501, 0, 188,
	189, 190, 360, 536, 0, 191, 0, 0, 0, 55,
	192, 193, 194, 195, 459, 56, 0, 487, 476, 477,
	474, 475, 463, 0, 0, 455, 456, 0, 0, 0,
	0, 457, 87, 88, 464, 89, 0, 0, 0, 0,
	503, 469, 0, 0, 0, 90, 91, 197, 517, 199,
	518, 92, 519, 520, 0, 93, 203, 204, 94, 484,
	502, 521, 522, 207, 0, 513, 0, 495, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 0, 362, 101,
	102, 0, 496, 498, 0, 497, 499, 103, 104, 105,
	106, 523, 107, 524, 525, 0, 108, 0, 109, 0,
	0, 0, 516, 111, 0, 112, 0, 0, 0, 468,
	113, 114, 504, 482, 0, 0, 115, 116, 526, 0,
	117, 0, 118, 0, 0, 363, 0, 119, 514, 0,
	216, 0, 120, 121, 510, 512, 365, 0, 124, 0,
	122, 0, 364, 123, 527, 528, 529, 0, 494, 0,
	366, 125, 367, 126, 127, 0, 0, 515, 368, 128,
	369, 0, 129, 0, 0, 130, 0, 131, 132, 133,
	134, 135, 370, 136, 137, 140, 138, 458, 139, 483,
	511, 141, 530, 142, 143, 0, 0, 0, 0, 0,
	144, 226, 371, 145, 372, 505, 146, 147, 148, 0,
	506, 149, 229, 150, 0, 151, 152, 153, 531, 154,
	155, 0, 157, 158, 156, 159, 0, 160, 373, 161,
	162, 472, 163, 0, 164, 165, 166, 57, 232, 167,
	168, 500, 169, 170, 374, 171, 532, 234, 172, 0,
	173, 174, 176, 533, 175, 507, 0, 177, 59, 178,
	179, 0, 237, 534, 535, 0, 0, 180, 508, 509,
	481, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	501, 0, 188, 189, 190, 360, 536, 0, 191, 0,
	0, 0, 55, 192, 193, 194, 195, 459, 56, 0,
	487, 476, 477, 474, 475, 463, 0, 0, 455, 456,
	0, 0, 0, 0, 457, 87, 88, 464, 89, 0,
	0, 0, 0, 503, 469, 0, 0, 0, 90, 91,
	197, 517, 199, 518, 92, 519, 520, 1144, 93, 203,
	204, 94, 484, 502, 521, 522, 207, 0, 513, 0,
	495, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 362, 101, 102, 0, 496, 498, 0, 497, 499,
	103, 104, 105, 106, 523, 107, 524, 525, 0, 108,
	0, 109, 0, 0, 0, 516, 111, 0, 112, 0,
	0, 0, 468, 113, 114, 504, 482, 0, 0, 115,
	116, 526, 0, 117, 0, 118, 0, 1149, 363, 0,
	119, 514, 0, 216, 0, 120, 121, 510, 512, 365,
	0, 124, 0, 122, 0, 364, 123, 527, 528, 529,
	0, 494, 0, 366, 125, 367, 126, 127, 0, 1145,
	515, 368, 128, 369, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 370, 136, 137, 140, 138,
	458, 139, 483, 511, 141, 530, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 371, 145, 372, 505, 146,
	147, 148, 0, 506, 149, 229, 150, 0, 151, 152,
	153, 531, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 373, 161, 162, 472, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 500, 169, 170, 374, 171, 532,
	234, 172, 0, 173, 174, 176, 533, 175, 507, 0,
	177, 0, 178, 179, 0, 237, 534, 535, 0, 1146,
	180, 508, 509, 481, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 501, 0, 188, 189, 190, 242, 536,
	0, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	459, 0, 0, 487, 476, 477, 474, 475, 463, 0,
	0, 455, 456, 0, 0, 0, 0, 457, 87, 88,
	464, 89, 0, 0, 0, 0, 503, 469, 0, 0,
	0, 90, 91, 197, 517, 199, 518, 92, 519, 520,
	0, 93, 203, 204, 94, 484, 502, 521, 522, 207,
	0, 513, 0, 495, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 0, 362, 101, 102, 0, 496, 498,
	0, 497, 499, 103, 104, 105, 106, 523, 107, 524,
	525, 0, 108, 0, 109, 0, 0, 0, 516, 111,
	0, 112, 0, 0, 0, 468, 113, 114, 504, 482,
	0, 0, 115, 116, 526, 0, 117, 0, 118, 0,
	0, 363, 0, 119, 514, 0, 216, 0, 120, 121,
	510, 512, 365, 0, 124, 0, 122, 0, 364, 123,
	527, 528, 529, 0, 494, 0, 366, 125, 367, 126,
	127, 0, 0, 515, 368, 128, 369, 0, 129, 0,
	0, 130, 0, 131, 132, 133, 134, 135, 370, 136,
	137, 140, 138, 458, 139, 483, 511, 141, 530, 142,
	143, 0, 0, 0, 0, 0, 144, 226, 371, 145,
	372, 505, 146, 147, 148, 0, 506, 149, 229, 150,
	0, 151, 152, 153, 531, 154, 155, 0, 157, 158,
	156, 159, 0, 160, 373, 161, 162, 472, 163, 0,
	164, 165, 166, 0, 232, 167, 168, 500, 169, 170,
	374, 171, 532, 234, 172, 0, 173, 174, 176, 533,
	175, 507, 0, 177, 0, 178, 179, 0, 237, 534,
	535, 0, 0, 180, 508, 509, 481, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 501, 0, 188, 189,
	190, 242, 536, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 455, 456, 0, 0, 0, 0,
	457, 0, 0, 464, 1512, 487, 476, 477, 474, 475,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 0, 89, 0, 0, 0, 0, 503, 469,
	0, 0, 0, 90, 91, 197, 517, 199, 518, 92,
	519, 520, 0, 93, 203, 204, 94, 484, 502, 521,
	522, 207, 0, 513, 0, 495, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 0, 362, 101, 102, 0,
	496, 498, 0, 497, 499, 103, 104, 105, 106, 523,
	107, 524, 525, 0, 108, 0, 109, 0, 0, 0,
	516, 111, 0, 112, 0, 0, 0, 468, 113, 114,
	504, 482, 0, 0, 115, 116, 526, 0, 117, 0,
	118, 0, 0, 363, 0, 119, 514, 0, 216, 0,
	120, 121, 510, 512, 365, 0, 124, 0, 122, 0,
	364, 123, 527, 528, 529, 0, 494, 0, 366, 125,
	367, 126, 127, 0, 0, 515, 368, 128, 369, 0,
	129, 0, 0, 130, 0, 131, 132, 133, 134, 135,
	370, 136, 137, 140, 138, 458, 139, 483, 511, 141,
	530, 142, 143, 0, 0, 0, 0, 0, 144, 226,
	371, 145, 372, 505, 146, 147, 148, 0, 506, 149,
	229, 150, 0, 151, 152, 153, 531, 154, 155, 0,
	157, 158, 156, 159, 0, 160, 373, 161, 162, 472,
	163, 0, 164, 165, 166, 0, 232, 167, 168, 500,
	169, 170, 374, 171, 532, 234, 172, 0, 173, 174,
	176, 533, 175, 507, 0, 177, 0, 178, 179, 0,
	237, 534, 535, 0, 0, 180, 508, 509, 481, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 501, 0,
	188, 189, 190, 242, 536, 0, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 455, 456, 0, 0,
	0, 0, 457, 0, 0, 464, 1462, 487, 476, 477,
	474, 475, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 0,
	503, 469, 0, 0, 0, 90, 91, 197, 517, 199,
	518, 92, 519, 520, 0, 93, 203, 204, 94, 484,
	502, 521, 522, 207, 0, 513, 0, 495, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 0, 362, 101,
	102, 0, 496, 498, 0, 497, 499, 103, 104, 105,
	106, 523, 107, 524, 525, 0, 108, 0, 109, 0,
	0, 0, 516, 111, 0, 112, 0, 0, 0, 468,
	113, 114, 504, 482, 0, 0, 115, 116, 526, 0,
	117, 0, 118, 0, 0, 363, 0, 119, 514, 0,
	216, 0, 120, 121, 510, 512, 365, 0, 124, 0,
	122, 0, 364, 123, 527, 528, 529, 0, 494, 0,
	366, 125, 367, 126, 127, 0, 0, 515, 368, 128,
	369, 0, 129, 0, 0, 130, 0, 131, 132, 133,
	134, 135, 370, 136, 137, 140, 138, 458, 139, 483,
	511, 141, 530, 142, 143, 0, 0, 0, 0, 0,
	144, 226, 371, 145, 372, 505, 146, 147, 148, 0,
	506, 149, 229, 150, 0, 151, 152, 153, 531, 154,
	155, 0, 157, 158, 156, 159, 0, 160, 373, 161,
	162, 472, 163, 0, 164, 165, 166, 0, 232, 167,
	168, 500, 169, 170, 374, 171, 532, 234, 172, 0,
	173, 174, 176, 533, 175, 507, 0, 177, 0, 178,
	179, 0, 237, 534, 535, 0, 0, 180, 508, 509,
	481, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	501, 0, 188, 189, 190, 242, 536, 0, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 455, 456,
	0, 0, 0, 0, 457, 0, 0, 464, 1101, 487,
	476, 477, 474, 475, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 0, 89, 0, 0,
	0, 0, 503, 469, 0, 0, 0, 90, 91, 197,
	517, 199, 518, 92, 519, 520, 0, 93, 203, 204,
	94, 484, 502, 521, 522, 207, 0, 513, 0, 495,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 0,
	362, 101, 102, 0, 496, 498, 0, 497, 499, 103,
	104, 105, 106, 523, 107, 524, 525, 0, 108, 0,
	109, 0, 0, 0, 516, 111, 0, 112, 0, 0,
	0, 468, 113, 114, 504, 482, 0, 0, 115, 116,
	526, 0, 117, 0, 118, 0, 0, 363, 0, 119,
	514, 0, 216, 0, 120, 121, 510, 512, 365, 0,
	124, 0, 122, 0, 364, 123, 527, 528, 529, 0,
	494, 0, 366, 125, 367, 126, 127, 0, 0, 515,
	368, 128, 369, 0, 129, 0, 0, 130, 0, 131,
	132, 133, 134, 135, 370, 136, 137, 140, 138, 458,
	139, 483, 511, 141, 530, 142, 143, 0, 0, 0,
	0, 0, 144, 226, 371, 145, 372, 505, 146, 147,
	148, 0, 506, 149, 229, 150, 0, 151, 152, 153,
	531, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	373, 161, 162, 472, 163, 0, 164, 165, 166, 0,
	232, 167, 168, 500, 169, 170, 374, 171, 532, 234,
	172, 0, 173, 174, 176, 533, 175, 507, 0, 177,
	0, 178, 179, 0, 237, 534, 535, 0, 0, 180,
	508, 509, 481, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 501, 0, 188, 189, 190, 242, 536, 0,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	455, 456, 0, 0, 0, 0, 457, 861, 1098, 464,
	487, 476, 477, 474, 475, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 503, 469, 0, 0, 0, 90, 91,
	197, 517, 199, 518, 92, 519, 520, 0, 93, 203,
	204, 94, 484, 502, 521, 522, 207, 0, 513, 0,
	495, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 362, 101, 102, 0, 496, 498, 0, 497, 499,
	103, 104, 105, 106, 523, 107, 524, 525, 0, 108,
	0, 109, 0, 0, 0, 516, 111, 0, 112, 0,
	0, 0, 468, 113, 114, 504, 482, 0, 0, 115,
	116, 526, 0, 117, 0, 118, 0, 0, 363, 0,
	119, 514, 0, 216, 0, 120, 121, 510, 512, 365,
	0, 124, 0, 122, 0, 364, 123, 527, 528, 529,
	0, 494, 0, 366, 125, 367, 126, 127, 0, 0,
	515, 368, 128, 369, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 370, 136, 137, 140, 138,
	458, 139, 483, 511, 141, 530, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 371, 145, 372, 505, 146,
	147, 148, 0, 506, 149, 229, 150, 0, 151, 152,
	153, 531, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 373, 161, 162, 472, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 500, 169, 170, 374, 171, 532,
	234, 172, 0, 173, 174, 176, 533, 175, 507, 0,
	177, 0, 178, 179, 0, 237, 534, 535, 0, 0,
	180, 508, 509, 481, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 501, 0, 188, 189, 190, 242, 536,
	0, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	459, 0, 0, 487, 476, 477, 474, 475, 463, 0,
	0, 455, 456, 453, 0, 0, 0, 457, 87, 88,
	464, 89, 0, 0, 0, 0, 503, 469, 0, 0,
	0, 90, 91, 197, 517, 199, 518, 92, 519, 520,
	0, 93, 203, 204, 94, 484, 502, 521, 522, 207,
	0, 513, 0, 495, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 0, 362, 101, 102, 0, 496, 498,
	0, 497, 499, 103, 104, 105, 106, 523, 107, 524,
	525, 0, 108, 0, 109, 0, 0, 0, 516, 111,
	0, 112, 0, 0, 0, 468, 113, 114, 504, 482,
	0, 0, 115, 116, 526, 0, 117, 0, 118, 0,
	0, 363, 0, 119, 514, 0, 216, 0, 120, 121,
	510, 512, 365, 0, 124, 0, 122, 0, 364, 123,
	527, 528, 529, 0, 494, 0, 366, 125, 367, 126,
	127, 0, 0, 515, 368, 128, 369, 0, 129, 0,
	0, 130, 0, 131, 132, 133, 134, 135, 370, 136,
	137, 140, 138, 458, 139, 483, 511, 141, 530, 142,
	143, 0, 0, 0, 0, 0, 144, 226, 371, 145,
	372, 505, 146, 147, 148, 0, 506, 149, 229, 150,
	0, 151, 152, 153, 531, 154, 155, 0, 157, 158,
	156, 159, 0, 160, 373, 161, 162, 472, 163, 0,
	164, 165, 166, 0, 232, 167, 168, 500, 169, 170,
	374, 171, 532, 234, 172, 0, 173, 174, 176, 533,
	175, 507, 0, 177, 0, 178, 179, 0, 237, 534,
	535, 0, 0, 180, 508, 509, 481, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 501, 0, 188, 189,
	190, 242, 536, 1467, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 459, 0, 0, 487, 476, 477, 474,
	475, 463, 0, 0, 455, 456, 0, 0, 0, 0,
	457, 87, 88, 464, 89, 0, 0, 0, 0, 503,
	469, 0, 0, 0, 90, 91, 197, 517, 199, 518,
	92, 519, 520, 0, 93, 203, 204, 94, 484, 502,
	521, 522, 207, 0, 513, 0, 495, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 0, 362, 101, 102,
	0, 496, 498, 0, 497, 499, 103, 104, 105, 106,
	523, 107, 524, 525, 557, 108, 0, 109, 0, 0,
	0, 516, 111, 0, 112, 0, 0, 0, 468, 113,
	114, 504, 482, 0, 0, 115, 116, 526, 0, 117,
	0, 118, 0, 0, 363, 0, 119, 514, 0, 216,
	0, 120, 121, 510, 512, 365, 0, 124, 0, 122,
	0, 364, 123, 527, 528, 529, 0, 494, 0, 366,
	125, 367, 126, 127, 0, 0, 515, 368, 128, 369,
	0, 129, 0, 0, 130, 0, 131, 132, 133, 134,
	135, 370, 136, 137, 140, 138, 458, 139, 483, 511,
	141, 530, 142, 143, 0, 0, 0, 0, 0, 144,
	226, 371, 145, 372, 505, 146, 147, 148, 0, 506,
	149, 229, 150, 0, 151, 152, 153, 531, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 373, 161, 162,
	472, 163, 0, 164, 165, 166, 0, 232, 167, 168,
	500, 169, 170, 374, 171, 532, 234, 172, 0, 173,
	174, 176, 533, 175, 507, 0, 177, 0, 178, 179,
	0, 237, 534, 535, 0, 0, 180, 508, 509, 481,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 501,
	0, 188, 189, 190, 242, 536, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 459, 0, 0, 487,
	476, 477, 474, 475, 463, 0, 0, 455, 456, 0,
	0, 0, 0, 457, 87, 88, 464, 89, 0, 0,
	0, 0, 503, 469, 0, 0, 0, 90, 91, 197,
	517, 199, 518, 92, 519, 520, 0, 93, 203, 204,
	94, 484, 502, 521, 522, 207, 0, 513, 0, 495,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 0,
	362, 101, 102, 0, 496, 498, 0, 497, 499, 103,
	104, 105, 106, 523, 107, 524, 525, 0, 108, 0,
	109, 0, 0, 0, 516, 111, 0, 112, 0, 0,
	0, 468, 113, 114, 504, 482, 0, 0, 115, 116,
	526, 0, 117, 0, 118, 0, 1149, 363, 0, 119,
	514, 0, 216, 0, 120, 121, 510, 512, 365, 0,
	124, 0, 122, 0, 364, 123, 527, 528, 529, 0,
	494, 0, 366, 125, 367, 126, 127, 0, 0, 515,
	368, 128, 369, 0, 129, 0, 0, 130, 0, 131,
	132, 133, 134, 135, 370, 136, 137, 140, 138, 458,
	139, 483, 511, 141, 530, 142, 143, 0, 0, 0,
	0, 0, 144, 226, 371, 145, 372, 505, 146, 147,
	148, 0, 506, 149, 229, 150, 0, 151, 152, 153,
	531, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	373, 161, 162, 472, 163, 0, 164, 165, 166, 0,
	232, 167, 168, 500, 169, 170, 374, 171, 532, 234,
	172, 0, 173, 174, 176, 533, 175, 507, 0, 177,
	0, 178, 179, 0, 237, 534, 535, 0, 0, 180,
	508, 509, 481, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 501, 0, 188, 189, 190, 242, 536, 0,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	455, 456, 0, 0, 0, 0, 457, 0, 0, 464,
	487, 476, 477, 474, 475, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 796, 89, 0,
	0, 0, 0, 503, 469, 0, 0, 0, 90, 91,
	197, 517, 199, 518, 92, 519, 520, 0, 93, 203,
	204, 94, 484, 502, 521, 522, 207, 0, 513, 0,
	495, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 362, 101, 102, 0, 496, 498, 0, 497, 499,
	103, 104, 105, 106, 523, 107, 524, 525, 0, 108,
	0, 109, 0, 0, 0, 516, 111, 0, 112, 0,
	0, 0, 468, 113, 114, 504, 482, 0, 0, 115,
	116, 526, 0, 117, 0, 118, 0, 0, 363, 0,
	119, 514, 0, 216, 0, 120, 121, 510, 512, 365,
	0, 124, 0, 122, 0, 364, 123, 527, 528, 529,
	0, 494, 0, 366, 125, 367, 126, 127, 0, 0,
	515, 368, 128, 369, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 370, 136, 137, 140, 138,
	458, 139, 483, 511, 141, 530, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 371, 145, 372, 505, 146,
	147, 148, 0, 506, 149, 229, 150, 0, 151, 152,
	153, 531, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 373, 161, 162, 472, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 500, 169, 170, 374, 171, 532,
	234, 172, 0, 173, 174, 176, 533, 175, 507, 0,
	177, 0, 178, 179, 0, 237, 534, 535, 0, 0,
	180, 508, 509, 481, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 501, 0, 188, 189, 190, 242, 536,
	0, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	459, 0, 0, 487, 476, 477, 474, 475, 463, 0,
	0, 455, 456, 0, 0, 0, 0, 457, 87, 88,
	464, 89, 0, 0, 0, 0, 503, 469, 0, 0,
	0, 90, 91, 197, 517, 199, 518, 92, 519, 520,
	0, 93, 203, 204, 94, 484, 502, 521, 522, 207,
	0, 513, 0, 495, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 0, 362, 101, 1811, 0, 496, 498,
	0, 497, 499, 103, 104, 105, 106, 523, 107, 524,
	525, 0, 108, 0, 109, 0, 0, 0, 516, 111,
	0, 112, 0, 0, 0, 468, 113, 114, 504, 482,
	0, 0, 115, 116, 526, 0, 117, 0, 118, 0,
	0, 363, 0, 119, 514, 0, 216, 0, 120, 121,
	510, 512, 365, 0, 124, 0, 122, 0, 364, 123,
	527, 528, 529, 0, 494, 0, 366, 125, 367, 126,
	127, 0, 0, 515, 368, 128, 369, 0, 129, 0,
	0, 130, 0, 131, 132, 133, 134, 135, 370, 136,
	137, 140, 138, 458, 139, 483, 511, 141, 530, 142,
	143, 0, 0, 0, 0, 0, 144, 226, 371, 145,
	372, 505, 146, 147, 148, 0, 506, 149, 229, 150,
	0, 151, 152, 153, 531, 154, 155, 0, 157, 158,
	156, 159, 0, 160, 373, 161, 162, 472, 163, 0,
	164, 165, 166, 0, 232, 167, 168, 500, 169, 170,
	374, 171, 532, 234, 172, 0, 173, 174, 176, 533,
	175, 507, 0, 177, 0, 178, 179, 0, 237, 534,
	535, 0, 0, 180, 508, 509, 481, 181, 182, 1810,
	184, 0, 0, 185, 186, 187, 501, 0, 188, 189,
	190, 242, 536, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 459, 0, 0, 487, 476, 477, 474,
	475, 463, 0, 0, 455, 456, 0, 0, 0, 0,
	457, 87, 88, 464, 89, 0, 0, 0, 0, 503,
	469, 0, 0, 0, 90, 91, 1809, 517, 199, 518,
	92, 519, 520, 0, 93, 203, 204, 94, 484, 502,
	521, 522, 207, 0, 513, 0, 495, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 0, 362, 101, 1811,
	0, 496, 498, 0, 497, 499, 103, 104, 105, 106,
	523, 107, 524, 525, 0, 108, 0, 109, 0, 0,
	0, 516, 111, 0, 112, 0, 0, 0, 468, 113,
	114, 504, 482, 0, 0, 115, 116, 526, 0, 117,
	0, 118, 0, 0, 363, 0, 119, 514, 0, 216,
	0, 120, 121, 510, 512, 365, 0, 124, 0, 122,
	0, 364, 123, 527, 528, 529, 0, 494, 0, 366,
	125, 367, 126, 127, 0, 0, 515, 368, 128, 369,
	0, 129, 0, 0, 130, 0, 131, 132, 133, 134,
	135, 370, 136, 137, 140, 138, 458, 139, 483, 511,
	141, 530, 142, 143, 0, 0, 0, 0, 0, 144,
	226, 371, 145, 372, 505, 146, 147, 148, 0, 506,
	149, 229, 150, 0, 151, 152, 153, 531, 154, 155,
	0, 157, 158, 156, 159, 0, 160, 373, 161, 162,
	472, 163, 0, 164, 165, 166, 0, 232, 167, 168,
	500, 169, 170, 374, 171, 532, 234, 172, 0, 173,
	174, 176, 533, 175, 507, 0, 177, 0, 178, 179,
	0, 237, 534, 535, 0, 0, 180, 508, 509, 481,
	181, 182, 1810, 184, 0, 0, 185, 186, 187, 501,
	0, 188, 189, 190, 242, 536, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 459, 0, 0, 487,
	476, 477, 474, 475, 463, 0, 0, 455, 456, 0,
	0, 0, 0, 457, 87, 88, 464, 89, 0, 0,
	0, 0, 503, 469, 0, 0, 0, 90, 91, 197,
	517, 199, 518, 92, 519, 520, 0, 93, 203, 204,
	94, 484, 502, 521, 522, 207, 0, 513, 0, 495,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 0,
	362, 101, 102, 0, 496, 498, 0, 497, 499, 103,
	104, 105, 106, 523, 107, 524, 525, 0, 108, 0,
	109, 0, 0, 0, 516, 111, 0, 112, 0, 0,
	0, 468, 113, 114, 504, 482, 0, 0, 115, 116,
	526, 0, 117, 0, 118, 0, 0, 363, 0, 119,
	514, 0, 216, 0, 120, 121, 510, 512, 365, 0,
	124, 0, 122, 0, 364, 123, 527, 528, 529, 0,
	494, 0, 366, 125, 367, 126, 127, 0, 0, 515,
	368, 128, 369, 0, 129, 0, 0, 130, 0, 131,
	132, 133, 134, 135, 370, 136, 137, 140, 138, 458,
	139, 483, 511, 141, 530, 142, 143, 0, 0, 0,
	0, 0, 144, 226, 371, 145, 372, 505, 146, 147,
	148, 0, 506, 149, 229, 150, 0, 151, 152, 153,
	531, 154, 155, 0, 157, 158, 156, 159, 0, 160,
	373, 161, 162, 472, 163, 0, 164, 165, 166, 0,
	232, 167, 168, 500, 169, 170, 374, 171, 532, 234,
	172, 0, 173, 174, 176, 533, 175, 507, 0, 177,
	0, 178, 179, 0, 237, 534, 535, 0, 0, 180,
	508, 509, 481, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 501, 0, 188, 189, 190, 242, 536, 0,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 459,
	0, 0, 487, 476, 477, 474, 475, 463, 0, 0,
	455, 456, 0, 0, 0, 0, 457, 87, 88, 464,
	89, 0, 0, 0, 0, 503, 469, 0, 0, 0,
	90, 91, 197, 517, 199, 518, 92, 519, 520, 0,
	93, 203, 204, 94, 484, 502, 521, 522, 207, 0,
	513, 0, 495, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 0, 362, 101, 102, 0, 496, 498, 0,
	497, 499, 103, 104, 105, 106, 523, 107, 524, 525,
	0, 108, 0, 109, 0, 0, 0, 516, 111, 0,
	112, 0, 0, 0, 468, 113, 114, 504, 482, 0,
	0, 115, 116, 526, 0, 117, 0, 118, 0, 0,
	363, 0, 119, 514, 0, 216, 0, 120, 121, 510,
	512, 365, 0, 124, 0, 122, 0, 364, 123, 527,
	528, 529, 0, 494, 0, 366, 125, 367, 126, 127,
	0, 0, 515, 368, 128, 369, 0, 129, 0, 0,
	130, 0, 131, 132, 133, 134, 135, 370, 136, 137,
	140, 138, 0, 139, 483, 511, 141, 530, 142, 143,
	0, 0, 0, 0, 0, 144, 226, 371, 145, 372,
	505, 146, 147, 148, 0, 506, 149, 229, 150, 0,
	151, 152, 153, 531, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 373, 161, 162, 1139, 163, 0, 164,
	165, 166, 0, 232, 167, 168, 500, 169, 170, 374,
	171, 532, 234, 172, 0, 173, 174, 176, 533, 175,
	507, 0, 177, 0, 178, 179, 0, 237, 534, 535,
	0, 0, 180, 508, 509, 481, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 501, 0, 188, 189, 190,
	242, 536, 0, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 487, 476, 477, 474, 475, 463, 0, 0,
	0, 0, 0, 1135, 1136, 0, 0, 87, 88, 1137,
	89, 0, 1138, 0, 0, 503, 469, 0, 0, 0,
	90, 91, 0, 517, 199, 518, 92, 519, 520, 0,
	93, 203, 204, 94, 484, 502, 521, 522, 207, 0,
	513, 0, 495, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 0, 362, 101, 1811, 0, 496, 498, 0,
	497, 499, 103, 104, 105, 106, 523, 107, 524, 525,
	0, 108, 0, 109, 0, 0, 0, 516, 111, 0,
	112, 0, 0, 0, 468, 113, 114, 504, 482, 0,
	0, 115, 116, 526, 0, 117, 0, 118, 0, 0,
	363, 0, 119, 514, 0, 216, 0, 120, 121, 510,
	512, 0, 0, 124, 0, 122, 0, 364, 123, 527,
	528, 529, 0, 494, 0, 0, 125, 367, 126, 127,
	0, 0, 515, 368, 128, 0, 0, 129, 0, 0,
	130, 0, 131, 132, 133, 134, 135, 370, 136, 137,
	140, 138, 458, 139, 483, 511, 141, 530, 142, 143,
	0, 0, 0, 0, 0, 144, 226, 371, 145, 372,
	505, 146, 147, 148, 0, 506, 149, 229, 150, 0,
	151, 152, 153, 531, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 373, 161, 162, 472, 163, 0, 164,
	165, 166, 0, 232, 167, 168, 500, 169, 170, 0,
	171, 532, 234, 172, 0, 173, 174, 176, 533, 175,
	507, 0, 177, 0, 178, 179, 0, 237, 534, 535,
	0, 0, 180, 508, 509, 481, 181, 182, 1810, 184,
	0, 0, 185, 186, 187, 501, 0, 188, 189, 190,
	242, 536, 0, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 455, 456, 0, 0, 87, 88, 457,
	89, 0, 464, 0, 0, 503, 0, 0, 0, 0,
	90, 91, 197, 198, 199, 200, 92, 201, 202, 0,
	93, 203, 204, 94, 0, 502, 205, 206, 207, 0,
	513, 0, 495, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 0, 362, 101, 102, 0, 496, 498, 0,
	497, 499, 103, 104, 105, 106, 209, 107, 210, 211,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 212, 113, 114, 504, 0, 0,
	0, 115, 116, 214, 0, 117, 0, 118, 0, 0,
	363, 0, 119, 514, 0, 216, 0, 120, 121, 510,
	512, 365, 0, 124, 0, 122, 0, 364, 123, 219,
	220, 221, 0, 222, 0, 366, 125, 367, 126, 127,
	0, 0, 515, 368, 128, 369, 0, 129, 0, 0,
	130, 0, 131, 132, 133, 134, 135, 370, 136, 137,
	140, 138, 0, 139, 0, 511, 141, 225, 142, 143,
	0, 0, 0, 0, 0, 144, 226, 371, 145, 372,
	505, 146, 147, 148, 0, 506, 149, 229, 150, 0,
	151, 152, 153, 230, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 373, 161, 162, 231, 163, 0, 164,
	165, 166, 0, 232, 167, 168, 500, 169, 170, 374,
	171, 233, 234, 172, 0, 173, 174, 176, 235, 175,
	507, 0, 177, 0, 178, 179, 0, 237, 238, 239,
	0, 0, 180, 508, 509, 0, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 501, 0, 188, 189, 190,
	242, 243, 0, 191, 0, 356, 0, 0, 192, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 0, 89, 0, 0, 0, 0, 196, 0,
	0, 0, 1578, 90, 91, 197, 198, 199, 200, 92,
	201, 202, 0, 93, 203, 204, 94, 0, 0, 205,
	206, 207, 0, 208, 0, 361, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 0, 362, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 209,
	107, 210, 211, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 212, 113, 114,
	213, 0, 0, 0, 115, 116, 214, 0, 117, 0,
	118, 0, 0, 363, 0, 119, 215, 0, 216, 0,
	120, 121, 217, 218, 365, 0, 124, 0, 122, 0,
	364, 123, 219, 220, 221, 0, 222, 0, 366, 125,
	367, 126, 127, 0, 0, 223, 368, 128, 369, 0,
	129, 0, 0, 130, 0, 131, 132, 133, 134, 135,
	370, 136, 137, 140, 138, 0, 139, 0, 224, 141,
	225, 142, 143, 0, 0, 0, 0, 0, 144, 226,
	371, 145, 372, 227, 146, 147, 148, 0, 228, 149,
	229, 150, 0, 151, 152, 153, 230, 154, 155, 0,
	157, 158, 156, 159, 0, 160, 373, 161, 162, 231,
	163, 0, 164, 165, 166, 57, 232, 167, 168, 0,
	169, 170, 374, 171, 233, 234, 172, 0, 173, 174,
	176, 235, 175, 236, 0, 177, 59, 178, 179, 0,
	237, 238, 239, 0, 0, 180, 240, 241, 0, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 0, 0,
	188, 189, 190, 360, 243, 0, 191, 0, 0, 0,
	55, 192, 193, 194, 195, 0, 56, 0, 356, 666,
	0, 667, 662, 657, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 54, 89, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 90, 91, 197, 198,
	199, 200, 92, 201, 202, 0, 93, 203, 204, 94,
	0, 0, 205, 206, 207, 0, 208, 0, 361, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 362,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 209, 107, 210, 211, 670, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	212, 113, 114, 213, 659, 0, 0, 115, 116, 214,
	0, 117, 0, 118, 0, 0, 363, 0, 119, 215,
	0, 216, 0, 120, 121, 217, 218, 365, 0, 124,
	0, 122, 0, 364, 123, 219, 220, 221, 0, 222,
	0, 366, 125, 367, 126, 127, 0, 0, 223, 368,
	128, 369, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 370, 136, 137, 140, 138, 0, 139,
	0, 224, 141, 225, 142, 143, 0, 660, 0, 0,
	0, 144, 226, 371, 145, 372, 227, 146, 147, 148,
	0, 228, 149, 229, 150, 0, 151, 152, 153, 230,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 373,
	161, 162, 231, 163, 0, 164, 165, 166, 0, 232,
	167, 168, 0, 169, 170, 374, 171, 233, 234, 172,
	0, 173, 174, 176, 235, 175, 236, 0, 177, 0,
	178, 179, 0, 237, 238, 239, 0, 0, 180, 240,
	241, 658, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 242, 243, 0, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 356, 666,
	0, 667, 662, 657, 0, 0, 0, 0, 0, 668,
	663, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 90, 91, 197, 198,
	199, 200, 92, 201, 202, 0, 93, 203, 204, 94,
	0, 0, 205, 206, 207, 0, 208, 0, 361, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 362,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 209, 107, 210, 211, 653, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	212, 113, 114, 213, 659, 0, 0, 115, 116, 214,
	0, 117, 0, 118, 0, 0, 363, 0, 119, 215,
	0, 216, 0, 120, 121, 217, 218, 365, 0, 124,
	0, 122, 0, 364, 123, 219, 220, 221, 0, 222,
	0, 366, 125, 367, 126, 127, 0, 0, 223, 368,
	128, 369, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 370, 136, 137, 140, 138, 0, 139,
	0, 224, 141, 225, 142, 143, 0, 660, 0, 0,
	0, 144, 226, 371, 145, 372, 227, 146, 147, 148,
	0, 228, 149, 229, 150, 0, 151, 152, 153, 230,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 373,
	161, 162, 231, 163, 0, 164, 165, 166, 0, 232,
	167, 168, 0, 169, 170, 374, 171, 233, 234, 172,
	0, 173, 174, 176, 235, 175, 236, 0, 177, 0,
	178, 179, 0, 237, 238, 239, 0, 0, 180, 240,
	241, 658, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 242, 243, 0, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 356, 666,
	0, 667, 662, 657, 0, 0, 0, 0, 0, 668,
	663, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 90, 91, 197, 198,
	199, 200, 92, 201, 202, 0, 93, 203, 204, 94,
	0, 0, 205, 206, 207, 0, 208, 0, 361, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 362,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 209, 107, 210, 211, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	212, 113, 114, 213, 659, 0, 0, 115, 116, 214,
	0, 117, 0, 118, 0, 0, 363, 0, 119, 215,
	0, 216, 0, 120, 121, 217, 218, 365, 0, 124,
	0, 122, 0, 364, 123, 219, 220, 221, 0, 222,
	0, 366, 125, 367, 126, 127, 0, 0, 223, 368,
	128, 369, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 370, 136, 137, 140, 138, 0, 139,
	0, 224, 141, 225, 142, 143, 0, 660, 0, 0,
	0, 144, 226, 371, 145, 372, 227, 146, 147, 148,
	0, 228, 149, 229, 150, 0, 151, 152, 153, 230,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 373,
	161, 162, 231, 163, 0, 164, 165, 166, 0, 232,
	167, 168, 0, 169, 170, 374, 171, 233, 234, 172,
	0, 173, 174, 176, 235, 175, 236, 0, 177, 0,
	178, 179, 0, 237, 238, 239, 0, 0, 180, 240,
	241, 658, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 242, 243, 84, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 0, 668,
	663, 196, 0, 0, 0, 0, 90, 91, 197, 198,
	199, 200, 92, 201, 202, 0, 93, 203, 204, 94,
	0, 0, 205, 206, 207, 0, 208, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 209, 107, 210, 211, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	212, 113, 114, 213, 0, 0, 0, 115, 116, 214,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 215,
	0, 216, 0, 120, 121, 217, 218, 0, 0, 124,
	0, 122, 0, 0, 123, 219, 220, 221, 0, 222,
	0, 0, 125, 0, 126, 127, 0, 0, 223, 0,
	128, 0, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 0, 136, 137, 140, 138, 0, 139,
	0, 224, 141, 225, 142, 143, 0, 0, 329, 0,
	0, 144, 226, 0, 145, 0, 227, 146, 147, 148,
	0, 228, 149, 229, 150, 0, 151, 152, 153, 230,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 0,
	161, 162, 231, 163, 0, 164, 165, 166, 57, 232,
	167, 168, 0, 169, 170, 0, 171, 233, 234, 172,
	0, 173, 174, 176, 235, 175, 236, 0, 177, 59,
	178, 179, 0, 237, 238, 239, 0, 0, 180, 240,
	241, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 360, 243, 0, 191,
	0, 84, 0, 55, 192, 193, 194, 195, 0, 56,
	0, 0, 0, 0, 0, 0, 87, 88, 0, 89,
	0, 0, 0, 0, 196, 0, 0, 0, 1040, 90,
	91, 197, 198, 199, 200, 92, 201, 202, 0, 93,
	203, 204, 94, 0, 0, 205, 206, 207, 0, 208,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 209, 107, 210, 211, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 212, 113, 114, 213, 0, 0, 0,
	115, 116, 214, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 215, 0, 216, 0, 120, 121, 217, 218,
	0, 0, 124, 0, 122, 0, 0, 123, 219, 220,
	221, 0, 222, 0, 0, 125, 0, 126, 127, 0,
	0, 223, 0, 128, 0, 0, 129, 0, 0, 130,
	0, 131, 132, 133, 134, 135, 0, 136, 137, 140,
	138, 0, 139, 0, 224, 141, 225, 142, 143, 0,
	0, 0, 0, 0, 144, 226, 0, 145, 0, 227,
	146, 147, 148, 0, 228, 149, 229, 150, 0, 151,
	152, 153, 230, 154, 155, 0, 157, 158, 156, 159,
	0, 160, 0, 161, 162, 231, 163, 0, 164, 165,
	166, 57, 232, 167, 168, 0, 169, 170, 0, 171,
	233, 234, 172, 0, 173, 174, 176, 235, 175, 236,
	0, 177, 59, 178, 179, 0, 237, 238, 239, 0,
	0, 180, 240, 241, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 0, 188, 189, 190, 360,
	243, 0, 191, 0, 84, 0, 55, 192, 193, 194,
	195, 0, 56, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 1262,
	0, 54, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 0, 191, 0, 0, 84, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	0, 196, 0, 0, 0, 445, 90, 91, 197, 198,
	199, 200, 92, 201, 202, 0, 93, 203, 204, 94,
	0, 0, 205, 206, 207, 0, 208, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 209, 107, 210, 211, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	212, 113, 114, 213, 0, 0, 0, 115, 116, 214,
	0, 117, 0, 118, 0, 0, 0, 0, 119, 215,
	0, 216, 0, 120, 121, 217, 218, 0, 0, 124,
	0, 122, 0, 0, 123, 219, 220, 221, 0, 222,
	0, 0, 125, 0, 126, 127, 0, 0, 223, 0,
	128, 0, 0, 129, 0, 0, 130, 0, 131, 132,
	133, 134, 135, 0, 136, 137, 140, 138, 0, 139,
	0, 224, 141, 225, 142, 143, 0, 0, 329, 0,
	0, 144, 226, 0, 145, 0, 227, 146, 147, 148,
	0, 228, 149, 229, 150, 0, 151, 152, 153, 230,
	154, 155, 0, 157, 158, 156, 159, 0, 160, 0,
	161, 162, 231, 163, 0, 164, 165, 166, 0, 232,
	167, 168, 0, 169, 170, 0, 171, 233, 234, 172,
	0, 173, 174, 176, 235, 175, 236, 0, 177, 0,
	178, 179, 0, 237, 238, 239, 0, 0, 180, 240,
	241, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 242, 243, 0, 191,
	0, 84, 0, 0, 192, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 0, 89,
	0, 0, 0, 0, 196, 0, 0, 0, 1040, 90,
	91, 197, 198, 199, 200, 92, 201, 202, 0, 93,
	203, 204, 94, 0, 0, 205, 206, 207, 0, 208,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 209, 107, 210, 211, 0,
	108, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 212, 113, 114, 213, 0, 0, 0,
	115, 116, 214, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 215, 0, 216, 0, 120, 121, 217, 218,
	0, 0, 124, 0, 122, 0, 0, 123, 219, 220,
	221, 0, 222, 0, 0, 125, 0, 126, 127, 0,
	0, 223, 0, 128, 0, 0, 129, 0, 0, 130,
	0, 131, 132, 133, 134, 135, 0, 136, 137, 140,
	138, 0, 139, 0, 224, 141, 225, 142, 143, 0,
	0, 0, 0, 0, 144, 226, 0, 145, 0, 227,
	146, 147, 148, 0, 228, 149, 229, 150, 0, 151,
	152, 153, 230, 154, 155, 0, 157, 158, 156, 159,
	0, 160, 0, 161, 162, 231, 163, 0, 164, 165,
	166, 0, 232, 167, 168, 0, 169, 170, 0, 171,
	233, 234, 172, 0, 173, 174, 176, 235, 175, 236,
	0, 177, 0, 178, 179, 0, 237, 238, 239, 0,
	0, 180, 240, 241, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 0, 188, 189, 190, 242,
	243, 0, 191, 0, 84, 0, 0, 192, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 950, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 0, 191, 0, 84, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 0,
	196, 0, 0, 0, 1477, 90, 91, 197, 198, 199,
	200, 92, 201, 202, 0, 93, 203, 204, 94, 0,
	0, 205, 206, 207, 0, 208, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 209, 107, 210, 211, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 212,
	113, 114, 213, 0, 0, 0, 115, 116, 214, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 215, 0,
	216, 0, 120, 121, 217, 218, 0, 0, 124, 0,
	122, 0, 0, 123, 219, 220, 221, 0, 222, 0,
	0, 125, 0, 126, 127, 0, 0, 223, 0, 128,
	0, 0, 129, 0, 0, 130, 0, 131, 132, 133,
	134, 135, 0, 136, 137, 140, 138, 0, 139, 0,
	224, 141, 225, 142, 143, 0, 0, 0, 0, 0,
	144, 226, 0, 145, 0, 227, 146, 147, 148, 0,
	228, 149, 229, 150, 0, 151, 152, 153, 230, 154,
	155, 0, 157, 158, 156, 159, 0, 160, 0, 161,
	162, 231, 163, 0, 164, 165, 166, 0, 232, 167,
	168, 0, 169, 170, 0, 171, 233, 234, 172, 0,
	173, 174, 176, 235, 175, 236, 0, 177, 0, 178,
	179, 0, 237, 238, 239, 0, 0, 180, 240, 241,
	0, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 0, 188, 189, 190, 242, 243, 0, 191, 0,
	84, 0, 0, 192, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 0, 196, 0, 0, 0, 547, 90, 91,
	197, 198, 199, 200, 92, 201, 202, 0, 93, 203,
	204, 94, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 637, 106, 209, 107, 210, 211, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 212, 113, 114, 213, 0, 0, 0, 115,
	116, 214, 0, 117, 0, 118, 0, 0, 0, 0,
	119, 215, 0, 216, 0, 120, 121, 217, 218, 0,
	0, 124, 0, 122, 0, 0, 123, 219, 220, 221,
	0, 222, 0, 0, 125, 0, 126, 127, 0, 0,
	223, 0, 128, 0, 0, 129, 0, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 140, 138,
	0, 139, 0, 224, 141, 225, 142, 143, 0, 0,
	0, 0, 0, 144, 226, 0, 145, 0, 227, 146,
	147, 148, 0, 228, 149, 229, 150, 0, 151, 152,
	153, 230, 154, 155, 0, 157, 158, 156, 159, 0,
	160, 0, 161, 162, 231, 163, 0, 164, 165, 166,
	0, 232, 167, 168, 0, 169, 170, 0, 171, 233,
	234, 172, 0, 173, 174, 176, 235, 175, 236, 0,
	177, 636, 178, 179, 0, 237, 238, 239, 0, 0,
	180, 240, 241, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 242, 243,
	0, 191, 84, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 0, 640, 0, 196, 0, 0, 0, 0,
	90, 91, 197, 198, 199, 200, 92, 201, 202, 0,
	93, 203, 204, 94, 0, 0, 205, 206, 207, 0,
	208, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 209, 107, 210, 211,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 212, 113, 114, 213, 0, 0,
	0, 115, 116, 214, 0, 117, 0, 118, 0, 0,
	0, 0, 119, 215, 0, 216, 0, 120, 121, 217,
	218, 0, 0, 124, 0, 122, 0, 0, 123, 219,
	220, 221, 0, 222, 0, 0, 125, 0, 126, 127,
	0, 0, 223, 0, 128, 0, 0, 129, 0, 0,
	130, 0, 131, 132, 133, 134, 135, 0, 136, 137,
	140, 138, 0, 139, 0, 224, 141, 225, 142, 143,
	0, 0, 0, 0, 0, 144, 226, 0, 145, 0,
	227, 146, 147, 148, 0, 228, 149, 229, 150, 0,
	151, 152, 153, 230, 154, 155, 0, 157, 158, 156,
	159, 0, 160, 0, 161, 162, 231, 163, 0, 164,
	165, 166, 0, 232, 167, 168, 0, 169, 170, 0,
	171, 233, 234, 172, 0, 173, 174, 176, 235, 175,
	236, 0, 177, 0, 178, 179, 0, 237, 238, 239,
	0, 0, 180, 240, 241, 0, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 0, 0, 188, 189, 190,
	242, 243, 0, 191, 356, 0, 0, 0, 192, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 640, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 361, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 362, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 363, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 365, 0, 124, 0, 122, 0, 364,
	123, 219, 220, 221, 0, 222, 0, 366, 125, 367,
	126, 127, 0, 0, 223, 368, 128, 369, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 370,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 371,
	145, 372, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 373, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 374, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 923, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 921, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 1016, 0, 115, 116, 214, 0, 117, 0, 118,
	926, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 1014, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 925, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 1015, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 923, 208, 0, 0, 918, 95, 96, 97, 0,
	98, 921, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	926, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 917, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 925, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 924, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 1262,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 329, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 589, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 329, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 381, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 335, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 329, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 247, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	246, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 1185, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 1183, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 1174, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 786, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 261, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 576,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 0,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 430, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 427, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	387, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 272, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 271,
	238, 239, 0, 0, 267, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 272, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 271,
	238, 239, 0, 0, 267, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 351, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 348, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 346, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 338, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 318, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 163,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 264,
	0, 0, 130, 0, 131, 132, 133, 134, 272, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 148, 0, 228, 149, 229,
	150, 0, 151, 152, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 266, 163,
	0, 164, 165, 166, 0, 232, 167, 265, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 271,
	238, 239, 0, 0, 267, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 84, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 90, 91, 197, 198, 199, 200, 92, 201,
	202, 0, 93, 203, 204, 94, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 209, 107,
	210, 211, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 212, 113, 114, 213,
	0, 0, 0, 115, 116, 214, 0, 117, 0, 118,
	0, 0, 0, 0, 119, 215, 0, 216, 0, 120,
	121, 217, 218, 0, 0, 124, 0, 122, 0, 0,
	123, 219, 220, 221, 0, 222, 0, 0, 125, 0,
	126, 127, 0, 0, 223, 0, 128, 0, 0, 129,
	0, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 140, 138, 0, 139, 0, 224, 141, 225,
	142, 143, 0, 0, 0, 0, 0, 144, 226, 0,
	145, 0, 227, 146, 147, 0, 0, 228, 149, 229,
	150, 0, 151, 0, 153, 230, 154, 155, 0, 157,
	158, 156, 159, 0, 160, 0, 161, 162, 231, 0,
	0, 164, 165, 166, 0, 232, 167, 168, 0, 169,
	170, 0, 171, 233, 234, 172, 0, 173, 174, 176,
	235, 175, 236, 0, 177, 0, 178, 179, 0, 237,
	238, 239, 0, 0, 180, 240, 241, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 242, 243, 0, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 812, 0, 831, 832, 833, 841,
	842, 843, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 0, 0, 0, 0, 0, 814, 0, 845, 0,
	812, 0, 831, 832, 833, 841, 842, 843, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 813, 0, 0,
	0, 0, 814, 828, 845, 0, 0, 0, 0, 0,
	0, 0, 0, 812, 0, 831, 832, 833, 841, 842,
	843, 0, 0, 813, 0, 0, 0, 0, 834, 828,
	0, 0, 0, 0, 0, 814, 0, 845, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 0, 0, 813, 0, 0, 0,
	0, 0, 828, 0, 0, 0, 0, 838, 846, 0,
	0, 0, 0, 0, 0, 0, 819, 0, 0, 0,
	0, 844, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 838, 846, 0, 0, 829, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 844, 0, 819,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 835,
	0, 0, 0, 829, 0, 0, 838, 846, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 835, 0, 0, 0, 0,
	836, 0, 0, 0, 830, 0, 829, 0, 0, 0,
	0, 0, 0, 0, 0, 839, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	830, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 839, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 830, 0, 0, 0, 0, 837, 0,
	0, 825, 826, 827, 839, 824, 821, 822, 823, 815,
	816, 817, 818, 820, 0, 840, 0, 0, 0, 1761,
	0, 0, 0, 0, 837, 0, 0, 825, 826, 827,
	0, 824, 821, 822, 823, 815, 816, 817, 818, 820,
	0, 840, 0, 0, 0, 1759, 0, 0, 0, 0,
	0, 1318, 0, 1335, 1336, 1337, 0, 837, 0, 0,
	825, 826, 827, 0, 824, 821, 822, 823, 815, 816,
	817, 818, 820, 0, 840, 0, 0, 812, 1739, 831,
	832, 833, 841, 842, 843, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 0, 0, 0, 0, 0, 814,
	1332, 845, 0, 812, 0, 831, 832, 833, 841, 842,
	843, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	813, 0, 0, 0, 0, 814, 828, 845, 0, 0,
	0, 0, 0, 0, 0, 0, 812, 0, 831, 832,
	833, 841, 842, 843, 0, 0, 813, 1323, 0, 0,
	0, 834, 828, 0, 0, 0, 0, 0, 814, 0,
	845, 0, 0, 0, 0, 1339, 0, 0, 0, 0,
	0, 0, 0, 819, 0, 0, 0, 0, 1338, 813,
	0, 0, 0, 0, 0, 828, 0, 0, 0, 0,
	838, 846, 0, 0, 1333, 0, 0, 0, 0, 819,
	0, 0, 0, 0, 844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 838, 846, 0, 0,
	829, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	844, 0, 819, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 835, 0, 0, 0, 829, 0, 0, 838,
	846, 1334, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 844, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 836, 0, 0, 0, 830, 0, 829,
	0, 0, 0, 0, 0, 0, 0, 0, 839, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 830, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 839, 0, 0, 0, 1329, 1330,
	1331, 0, 1328, 1325, 1326, 1327, 1319, 1320, 1321, 1322,
	1324, 0, 0, 0, 0, 0, 830, 0, 0, 0,
	0, 837, 0, 0, 825, 826, 827, 839, 824, 821,
	822, 823, 815, 816, 817, 818, 820, 0, 840, 0,
	0, 0, 1714, 0, 0, 0, 0, 837, 0, 0,
	825, 826, 827, 0, 824, 821, 822, 823, 815, 816,
	817, 818, 820, 0, 840, 0, 0, 0, 1709, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	837, 0, 0, 825, 826, 827, 0, 824, 821, 822,
	823, 815, 816, 817, 818, 820, 0, 840, 0, 0,
	812, 1705, 831, 832, 833, 841, 842, 843, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 0, 0, 0,
	0, 0, 814, 0, 845, 0, 812, 0, 831, 832,
	833, 841, 842, 843, 0, 0, 0, 0, 0, 0,
	0, 834, 0, 813, 0, 0, 0, 0, 814, 828,
	845, 0, 0, 0, 0, 0, 0, 0, 0, 812,
	0, 831, 832, 833, 841, 842, 843, 0, 0, 813,
	0, 0, 0, 0, 834, 828, 0, 0, 0, 0,
	0, 814, 0, 845, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 819, 0, 0, 0,
	0, 0, 813, 0, 0, 0, 0, 0, 828, 0,
	0, 0, 0, 838, 846, 0, 0, 0, 0, 0,
	0, 0, 819, 0, 0, 0, 0, 844, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 838,
	846, 0, 0, 829, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 844, 0, 819, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 835, 0, 0, 0, 829,
	0, 0, 838, 846, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 844, 0, 0, 0,
	0, 835, 0, 0, 0, 0, 836, 0, 0, 0,
	830, 0, 829, 0, 0, 0, 0, 0, 0, 0,
	0, 839, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 830, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 839, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 830,
	0, 0, 0, 0, 837, 0, 0, 825, 826, 827,
	839, 824, 821, 822, 823, 815, 816, 817, 818, 820,
	0, 840, 0, 0, 0, 1640, 0, 0, 0, 0,
	837, 0, 0, 825, 826, 827, 0, 824, 821, 822,
	823, 815, 816, 817, 818, 820, 0, 840, 0, 0,
	0, 1639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 825, 826, 827, 0,
	824, 821, 822, 823, 815, 816, 817, 818, 820, 0,
	840, 0, 0, 812, 1546, 831, 832, 833, 841, 842,
	843, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 0, 0, 0, 0, 814, 0, 845, 0, 812,
	0, 831, 832, 833, 841, 842, 843, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 813, 0, 0, 0,
	0, 814, 828, 845, 0, 0, 0, 0, 0, 0,
	0, 0, 812, 0, 831, 832, 833, 841, 842, 843,
	0, 0, 813, 0, 0, 0, 0, 834, 828, 0,
	0, 0, 0, 0, 814, 0, 845, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 0, 0, 813, 0, 0, 0, 0,
	0, 828, 0, 0, 0, 0, 838, 846, 0, 0,
	0, 0, 0, 0, 0, 819, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 838, 846, 0, 0, 829, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 844, 0, 819, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 835, 0,
	0, 0, 829, 0, 0, 838, 846, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 844,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 836,
	0, 0, 0, 830, 0, 829, 0, 0, 0, 0,
	0, 0, 0, 0, 839, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 830,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	839, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 0, 0, 837, 0, 0,
	825, 826, 827, 839, 824, 821, 822, 823, 815, 816,
	817, 818, 820, 0, 840, 0, 0, 0, 1480, 0,
	0, 0, 0, 837, 0, 0, 825, 826, 827, 0,
	824, 821, 822, 823, 815, 816, 817, 818, 820, 0,
	840, 0, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 825,
	826, 827, 0, 824, 821, 822, 823, 815, 816, 817,
	818, 820, 0, 840, 0, 0, 812, 1094, 831, 832,
	833, 841, 842, 843, 0, 0, 0, 0, 0, 0,
	0, 834, 0, 0, 0, 0, 0, 0, 814, 0,
	845, 0, 0, 0, 0, 0, 0, 0, 812, 0,
	831, 832, 833, 841, 842, 843, 0, 0, 0, 813,
	0, 0, 0, 834, 0, 828, 0, 0, 0, 0,
	814, 0, 845, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 813, 0, 0, 0, 0, 812, 828, 831, 832,
	833, 841, 842, 843, 0, 0, 0, 0, 0, 0,
	0, 834, 819, 1831, 0, 0, 1028, 0, 814, 0,
	845, 0, 0, 0, 0, 0, 0, 0, 0, 838,
	846, 0, 0, 0, 0, 0, 0, 0, 0, 813,
	0, 0, 0, 844, 819, 828, 1349, 0, 0, 1348,
	0, 0, 0, 836, 0, 0, 0, 0, 0, 829,
	0, 838, 846, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1029, 0, 0, 844, 0, 0, 0, 0,
	0, 835, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 829, 819, 0, 1830, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 838,
	846, 0, 0, 835, 0, 0, 830, 0, 0, 0,
	0, 0, 0, 844, 0, 0, 0, 839, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 0, 829,
	0, 0, 0, 0, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 839,
	0, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	837, 0, 0, 825, 826, 827, 0, 824, 821, 822,
	823, 815, 816, 817, 818, 820, 830, 840, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 839, 0, 0,
	0, 0, 837, 0, 0, 825, 826, 827, 0, 824,
	821, 822, 823, 815, 816, 817, 818, 820, 0, 840,
	0, 848, 0, 0, 0, 0, 0, 812, 0, 831,
	832, 833, 841, 842, 843, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 0, 0, 847, 0, 0, 814,
	837, 845, 0, 825, 826, 827, 0, 824, 821, 822,
	823, 815, 816, 817, 818, 820, 0, 840, 0, 0,
	813, 0, 0, 0, 0, 812, 828, 831, 832, 833,
	841, 842, 843, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 0, 0, 0, 0, 0, 814, 0, 845,
	0, 0, 0, 0, 0, 0, 0, 812, 0, 831,
	832, 833, 841, 842, 843, 0, 0, 0, 813, 0,
	0, 0, 834, 819, 828, 0, 0, 0, 0, 814,
	0, 845, 0, 0, 0, 0, 0, 0, 0, 0,
	838, 846, 0, 0, 0, 0, 0, 0, 0, 0,
	813, 0, 0, 0, 844, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	829, 819, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 838, 846,
	0, 0, 835, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 844, 819, 0, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 0, 829, 0,
	838, 846, 0, 0, 0, 0, 0, 830, 0, 0,
	0, 0, 0, 0, 844, 0, 0, 0, 839, 0,
	835, 313, 0, 0, 836, 0, 0, 0, 0, 0,
	829, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 835, 0, 0, 830, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 839, 0, 0, 0,
	0, 837, 0, 0, 825, 826, 827, 0, 824, 821,
	822, 823, 815, 816, 817, 818, 820, 830, 840, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 839, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1474, 0, 0, 0, 837,
	0, 0, 825, 826, 827, 0, 824, 821, 822, 823,
	815, 816, 817, 818, 820, 0, 840, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 837, 0, 0, 825, 826, 827, 0, 824, 821,
	822, 823, 815, 816, 817, 818, 820, 812, 840, 831,
	832, 833, 841, 842, 843, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 0, 0, 0, 0, 0, 814,
	0, 845, 0, 812, 0, 831, 832, 833, 841, 842,
	843, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	813, 0, 1350, 0, 0, 814, 828, 845, 0, 0,
	0, 0, 0, 0, 0, 0, 812, 0, 831, 832,
	833, 841, 842, 843, 0, 0, 813, 0, 0, 0,
	0, 834, 828, 0, 0, 0, 0, 0, 814, 0,
	845, 0, 812, 0, 831, 832, 833, 841, 842, 843,
	0, 0, 0, 819, 0, 0, 0, 834, 1355, 813,
	0, 1310, 0, 0, 814, 828, 845, 0, 0, 0,
	838, 846, 0, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 0, 844, 813, 0, 0, 0, 0,
	0, 828, 0, 0, 836, 0, 838, 846, 0, 0,
	829, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	844, 0, 819, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 835, 0, 0, 0, 829, 0, 0, 838,
	846, 0, 0, 0, 0, 0, 0, 0, 819, 0,
	0, 0, 0, 844, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 836, 0, 838, 846, 830, 0, 829,
	0, 0, 0, 0, 0, 0, 0, 0, 839, 844,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 835, 0, 830, 0, 829, 0, 0, 0, 0,
	0, 0, 1316, 0, 839, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 0, 0, 0, 0, 830, 0, 0, 0,
	0, 837, 0, 0, 825, 826, 827, 839, 824, 821,
	822, 823, 815, 816, 817, 818, 820, 0, 840, 0,
	0, 0, 830, 0, 0, 0, 0, 837, 0, 0,
	825, 826, 827, 839, 824, 821, 822, 823, 815, 816,
	817, 818, 820, 0, 840, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	837, 0, 0, 825, 826, 827, 0, 824, 821, 822,
	823, 815, 816, 817, 818, 820, 0, 840, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 825,
	826, 827, 0, 824, 821, 822, 823, 815, 816, 817,
	818, 820, 812, 840, 831, 832, 833, 841, 842, 843,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	0, 0, 0, 0, 814, 0, 845, 0, 812, 0,
	831, 832, 833, 841, 842, 843, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 813, 0, 0, 0, 0,
	814, 828, 845, 0, 0, 0, 812, 0, 831, 832,
	833, 841, 842, 843, 0, 0, 0, 0, 0, 0,
	0, 813, 0, 0, 0, 0, 0, 828, 814, 0,
	845, 0, 812, 0, 831, 832, 833, 841, 842, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 819, 813,
	0, 0, 0, 0, 814, 828, 845, 0, 0, 0,
	0, 0, 0, 0, 0, 838, 846, 0, 0, 0,
	0, 0, 0, 0, 819, 813, 0, 0, 0, 844,
	0, 828, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 838, 846, 0, 0, 829, 0, 0, 0, 0,
	0, 0, 819, 0, 0, 844, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 835, 0, 838,
	846, 829, 0, 0, 0, 0, 0, 0, 819, 0,
	0, 0, 0, 844, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 838, 846, 0, 0, 829,
	0, 0, 830, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 839, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 0, 829, 0, 0, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 839,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 830, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 839, 0, 825,
	826, 827, 0, 824, 821, 822, 823, 815, 816, 817,
	818, 820, 830, 840, 0, 0, 0, 0, 0, 0,
	0, 0, 837, 839, 0, 825, 826, 827, 0, 824,
	821, 822, 823, 815, 816, 817, 818, 820, 0, 840,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	837, 43, 0, 825, 826, 827, 0, 824, 821, 822,
	823, 815, 816, 817, 818, 820, 0, 840, 0, 0,
	0, 0, 0, 0, 0, 45, 837, 0, 0, 825,
	826, 827, 50, 824, 821, 822, 823, 815, 816, 817,
	818, 820, 0, 840, 0, 0, 0, 0, 0, 0,
	0, 34, 0, 0, 0, 0, 0, 0, 30, 0,
	0, 46, 0, 0, 0, 33, 31, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 35, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 32, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	0, 0, 36, 0, 47, 0, 0, 0, 0, 37,
	0, 0, 57, 0, 0, 0, 0, 40, 42, 0,
	0, 0, 0, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	0, 0, 0, 56, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54,
}
var sqlPact = [...]int{

	23198, -1000, 41, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 895, -1000, -1000, -1000, -1000, 648,
	867, 749, 15800, 15800, 15540, 1047, 1047, 17100, -1000, -1000,
	19960, -1000, 2335, 500, 501, 500, 500, 498, 17100, 607,
	663, 164, -1000, 777, 15, 19700, 15800, 1340, 39, 14500,
	334, 23198, 15280, 15800, 19440, 1176, 1092, 1090, 14500, 19180,
	18920, 18660, -1000, 10021, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 606, 340, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 338, -1000, 15020, -1000, 912, -1000,
	38, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 896,
	-1000, 15800, -1000, -1000, 18400, 18140, 337, 836, -1000, -1000,
	557, 416, 1374, -1000, 54, -1000, -1000, 1175, -1000, 889,
	1174, 1172, 1171, 1166, 1161, 1160, 411, 925, -1000, 602,
	836, -1000, 836, -1000, -1000, -1000, 583, 17100, -1000, 14500,
	-1000, 17880, 1104, 17620, -1000, 777, -1000, -1000, -1000, 941,
	1339, 1339, 1339, 1354, 153, 151, 164, 23, 15800, -1000,
	336, 23, 7016, 7016, -1000, -1000, 334, -1000, 368, 12673,
	55, -1000, 7562, -1000, 901, 1238, 746, 721, 1237, -100,
	14500, 15800, 15800, 647, 17360, -1000, 1236, 118, 1235, -1000,
	104, 1234, -1000, 18, -1000, -1000, -1000, -1000, -1000, -1000,
	334, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 14760, 1379, 2434, -1000, 8945,
	-1000, -1000, 12936, 986, 12936, -1000, -1000, 1378, -1000, 8945,
	-1000, 36, 35, 1053, 1046, 10564, 10294, 1298, 857, -1000,
	-1000, -1000, 53, 4468, 15800, 1186, 12936, 15800, 15800, 15800,
	15800, 15800, -1000, 15800, -1000, 1044, -1000, 15800, -1000, 34,
	29, -1000, 17100, -1000, 121, -1000, 422, 1012, 16840, 1245,
	1010, -1000, 941, -1000, 868, 1040, 8126, 8945, 164, -1000,
	-1000, 164, 164, 8945, -1000, -1000, 15800, 23, 1377, 15800,
	108, -1000, 22177, -1000, -1000, 8945, 8945, 8945, 8945, 8945,
	791, -1000, -1000, -1000, 5303, -1000, -1000, 55, 331, 184,
	-1000, -1000, 329, 55, -1000, -1000, -1000, -1000, 327, 1488,
	433, -1000, -1000, -1000, 8945, 421, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1185, 325, 311, -1000, -1000,
	-1000, -1000, 310, 302, 301, 300, 299, 297, 295, 293,
	282, 277, 274, 273, 270, 265, 773, -1000, 454, -1000,
	-1000, 454, 454, -1000, 249, 249, 251, -1000, -1000, -1000,
	249, -1000, -1000, -1000, 398, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 253, 108, -1000, -1000, -1000, 15800, 55, -1000,
	-1000, -1000, 8945, 4198, 12, -1000, 22902, -1000, -5, 828,
	-1000, 13980, 1317, 1316, 1322, 14500, 582, 581, 15800, 15800,
	431, 77, 1373, 77, 12147, -1000, 15800, 15800, -1000, 15800,
	-1000, -1000, 15800, -1000, 15800, 15800, 250, 13460, 750, 1233,
	15, 10, -1000, 1381, -1000, -1000, -1000, -1000, 81, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 251, 773, 249, 249, 249, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 398, -1000, -1000, 454, 454, 454,
	-1000, -1000, -6, 22902, 579, 5, 13198, 15800, -1000, 48,
	-1000, -1000, 1159, 497, -12, 763, 1082, 924, -1000, -1000,
	-1000, -1000, 20, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1408, -1000, -1000, -1000, -1000, 1452, 20,
	-1000, -1000, -1000, -1000, -1000, 1487, -1000, -1000, -1000, 4468,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 15800, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 763, 1082, -1000,
	-1000, 14500, 13720, 15, 1231, 876, 1007, -1000, -1000, 384,
	1222, -1000, -1000, -1000, -1000, 22902, -1000, 22902, 677, 1093,
	-1000, 1093, 17, -1000, 21936, -1000, 245, -13, -1000, 431,
	7016, 11884, 2434, 15800, 589, 8945, 8945, 8945, 8945, 8945,
	8945, 8945, 8945, 8945, 8945, 8945, 8945, 8945, 8945, 8945,
	8945, 8945, 8945, 8945, 8945, 8945, 8945, 951, 8945, 578,
	8945, 8945, 8945, 8945, 1081, 818, 236, 4468, -1000, 646,
	646, 646, 22956, 22956, 229, 33, 21572, 13, 55, -1000,
	-1000, 6725, 6433, 55, 4738, -1000, 674, 1434, 452, 22902,
	1193, 1132, 243, 141, 140, 8945, 8945, 875, 8945, 9218,
	8945, 8945, 5576, 8945, 8945, 8945, 8945, 8945, 8945, -1000,
	241, -1000, -1000, -1000, -1000, 1428, -1000, -1000, 1426, -1000,
	588, 572, 1425, 431, 138, -1000, 2035, -1000, -1000, 7562,
	-1000, 750, 15800, 15800, 15800, -1000, -1000, 1003, 16580, -1000,
	2434, 15800, -1000, 240, 239, 1063, 1062, 15800, 15800, 16320,
	16060, 15800, 778, 15800, 15800, 711, -1000, 678, 8945, 911,
	-1000, 11357, 459, 15800, 705, 76, -1000, -1000, -1000, 383,
	15800, -1000, -1000, -1000, 118, -1000, 104, -1000, -1000, 14500,
	-1000, -1000, -1000, -1000, -1000, -1000, 2434, 351, 266, -1000,
	1424, 575, -1000, 554, 539, 535, -1000, 238, -1000, 8945,
	15800, 13198, 5, 1, -1000, -1000, 15800, 1082, -1000, -1000,
	-1000, -1000, 676, -1000, 753, -1000, 10834, -1000, -1000, -1000,
	674, -1000, -11, -1000, -1000, -1000, -1000, 136, -3, -1000,
	-1000, -1000, -1000, -1000, 15800, 306, 15800, -1000, 15800, 15800,
	1218, 1482, 15800, -1000, -1000, -1000, 8945, -1000, -1000, -1000,
	15, 15800, -1000, 1130, -1000, -17, 1357, -118, 14240, -1000,
	11094, -1000, -1000, 403, 765, 765, 528, 528, 528, 528,
	182, 182, 806, 716, 3251, 3251, 3251, 569, 264, 264,
	3251, 3251, 3251, 22956, 22928, 504, 8945, 8945, 534, 814,
	236, 504, 8945, 1404, 504, 504, 504, -1000, 1059, -1000,
	-1000, -1000, 1158, 234, 9218, 9218, -1000, -1000, -1000, 5303,
	-1000, -1000, 233, 8945, -1000, 8945, -18, -98, -1000, -1000,
	-22, -1000, -1000, -1, 8945, 8945, 8945, 133, -1000, 132,
	626, -1000, 8945, 796, 232, 228, 8945, -1000, -1000, 22622,
	3353, 130, 1157, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	129, 22596, 127, 20801, -1000, 9218, 9218, 9218, 5303, 226,
	126, 21888, -87, 22563, 7835, 7835, 7835, 125, 22537, 8945,
	-87, 3044, 2485, 2431, -27, -28, -35, 1422, -37, 122,
	399, 394, 120, 1130, -1000, -1000, 8945, -1000, -1000, -1000,
	531, 524, 1215, -1000, 1000, -1000, 733, 8945, 15800, 224,
	222, 817, -1000, 1213, 907, 1208, 907, -1000, -5, 719,
	-1000, -1000, 513, -1000, 7016, 22902, -1000, 685, 1325, -41,
	-1000, -1000, -1000, 7016, 431, 12147, 11884, 7562, -42, -1000,
	-1000, 750, -1000, 508, 1421, 106, 1024, 976, 812, 654,
	1416, 22902, -11, -1000, -11, -1000, -1000, -1000, -1000, -1000,
	-1000, 15800, 1110, 13720, 219, 15800, 206, 371, 201, 15800,
	-1000, 1245, -1000, 100, -1000, 1121, 1353, -1000, 11884, 936,
	1072, 1066, 11884, 1079, 800, 800, 800, -1000, 14240, 3916,
	-1000, -1000, 15800, 200, 11620, 99, 1357, 8945, 504, 504,
	8945, 9218, 9218, -1000, 504, -1000, -1000, -1000, -1000, 1156,
	199, 8945, 2434, 3470, 3450, -43, 6141, -29, 21539, -1000,
	-1000, 184, -1000, 96, 7289, -1000, 22225, 3, 3, -1000,
	1466, 1243, -1000, 8945, 22257, -1000, 12410, 436, 807, 21513,
	2434, 2434, -1000, 8945, -1000, 1153, 8945, -1000, 2434, 9218,
	9218, 9218, 9218, 9218, 9218, 9218, 9218, 9218, 9218, 9218,
	9218, 9218, 9218, 9218, 9218, 9218, 9218, 9218, 1014, 9218,
	1403, 1403, 1403, -54, 5849, -1000, 1182, 1153, 8945, 8945,
	2434, 94, 93, 92, -1000, 8945, -87, 8945, 8945, 8945,
	-1000, -1000, -1000, 89, -1000, 1410, -1000, -1000, -1000, -1000,
	1121, 3640, 15800, 15800, 15800, 1205, 1810, -1000, 21229, -47,
	15800, 15800, -1000, 1069, 1091, 488, 15800, -1000, 15800, -1000,
	15800, 15800, 15800, 15800, -71, 7016, 217, 15, 15800, -71,
	678, -1000, -67, -1000, 381, -1000, 346, 342, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 87, -1000, -1000, 1114,
	-1000, 9758, 198, 15800, 13720, 15, 9758, 871, -1000, -1000,
	429, 8945, 8945, 1357, 610, 11884, 11884, 1925, 1065, 11884,
	-1000, -1000, -1000, -1000, -1000, -1000, 1088, 194, 15800, 14240,
	667, 504, 2548, 220, 8945, 2434, 22982, -49, 8945, 8945,
	-1000, -55, -1000, 8945, -1000, -1000, 1465, 8945, 86, 85,
	84, -1000, -1000, 22902, 8945, -1000, -1000, 20220, 8945, 82,
	-1000, 74, 73, 22902, 1182, 22902, -1000, 661, 661, 1403,
	1403, 1403, 1403, 928, 928, 1744, 476, 1790, 1790, 1790,
	521, 546, 546, 1790, 1790, 1790, 1145, 1049, 190, 3608,
	8945, -56, -1000, -1000, -1000, 22902, 22902, 70, -1000, -1000,
	-1000, -87, 2002, 21196, 21170, -1000, 68, 429, -1000, -1000,
	-1000, -1000, 15800, -1000, 15800, -1000, 15800, 15800, 1141, 979,
	-1000, -1000, 1061, 189, 9218, 15800, -1000, 834, -57, -70,
	946, -1000, 880, 8945, -1000, 2434, 907, 907, -1000, 510,
	509, -1000, -71, 1250, 15800, 1319, -1000, -1000, -1000, 188,
	-1000, -1000, -1000, 787, -72, -1000, 225, 1333, 8945, -1000,
	-1000, 186, 9758, -74, -1000, -1000, 67, -1000, -80, 15800,
	-1000, 15800, 22902, -87, 507, -1000, 1925, -1000, 185, 8945,
	11884, -1000, -147, -1000, 379, -1000, 15800, -85, -1000, 8945,
	8945, 22982, -86, -1000, 504, 504, -1000, 20886, -1000, 22225,
	-1000, -1000, -1000, 22902, 784, -1000, 20853, -1000, -1000, -1000,
	-1000, 9218, 1143, 183, 2434, 20827, -1000, -1000, 8945, -1000,
	-1000, -1000, -1000, -1000, 984, -1000, -1000, 15800, 998, -1000,
	-1000, 8945, 3608, 181, 1110, 178, -1000, -1000, -1000, 686,
	-1000, -1000, 22902, 1335, -1000, -1000, 15800, 15800, 571, -90,
	15800, -1000, -1000, 5030, 15800, 834, 9758, 1334, 55, 15800,
	1334, 20543, 4738, -91, -1000, 15800, 1110, 834, 169, -81,
	-1000, 1372, 1459, -1000, 15800, 22902, -1000, 1088, -1000, 4468,
	-101, -1000, 504, 504, -1000, -1000, 63, 807, 1348, -1000,
	3067, 9218, 2434, -102, -1000, 20510, -1000, -1000, 1203, 20484,
	1029, 15800, -1000, 15800, 15800, 466, 15800, -1000, -1000, 627,
	-1000, 431, -1000, 168, 1110, -1000, -1000, -1000, -1000, 1333,
	-1, 834, -1000, -1000, 1110, 9758, 15800, 165, -1000, -109,
	-1000, -1000, -1000, -1000, 681, 8945, 3067, -110, -1000, -1000,
	1196, -1000, 815, 805, 61, -115, 159, -1000, 8945, -1000,
	12147, -1000, 15800, -1000, 1334, 60, 1110, -1000, -121, -1000,
	-1000, -1000, 59, 8672, 8672, -87, -1000, 15800, -1000, 849,
	823, 650, -1000, -1000, -1000, -1000, -1000, 1029, 15800, 22902,
	-96, -126, -1000, -1000, -1000, 834, -1000, -1000, -1000, 9488,
	873, 669, 21856, -1000, -1000, -1000, 1278, -1000, 474, 967,
	967, 815, -130, -1000, 907, 1110, 1385, -1000, -1000, -1000,
	-1000, -1000, -1000, 1392, -1000, -1000, 1026, -1000, -1000, -1000,
	-1000, -1000, 8399, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1683, 1679, 1376, 125, 123, 1674, 1672, 1670, 1665,
	108, 121, 120, 124, 1663, 92, 1662, 1660, 1658, 103,
	1657, 1656, 1655, 79, 1654, 1653, 1652, 1647, 1646, 96,
	31, 170, 2174, 164, 1645, 1644, 1640, 23, 101, 61,
	1639, 9, 53, 91, 104, 1419, 42, 1637, 1636, 142,
	21, 30, 113, 100, 147, 133, 118, 1635, 1632, 1631,
	55, 1630, 6, 1629, 1628, 1625, 58, 18, 1622, 28,
	1621, 16, 1620, 1619, 134, 1617, 73, 97, 110, 59,
	129, 13, 1616, 62, 14, 75, 1612, 36, 1610, 39,
	80, 141, 1606, 50, 148, 66, 27, 67, 1602, 1600,
	1599, 1598, 76, 1597, 89, 106, 1594, 1593, 84, 1591,
	136, 138, 1589, 1588, 132, 1587, 1586, 1585, 743, 1584,
	1582, 640, 1578, 11, 46, 54, 5, 114, 109, 77,
	1577, 17, 1574, 2091, 592, 19, 1573, 52, 37, 87,
	47, 78, 29, 1572, 1570, 102, 1569, 1563, 1561, 1560,
	1559, 82, 1558, 68, 143, 44, 51, 88, 32, 22,
	26, 85, 98, 150, 107, 1556, 1555, 117, 1554, 93,
	1552, 1551, 659, 115, 1548, 1545, 1544, 590, 331, 322,
	162, 1543, 1542, 264, 220, 1541, 1540, 127, 1536, 1534,
	144, 1530, 206, 43, 1529, 116, 1528, 90, 1527, 0,
	48, 45, 1526, 130, 81, 1525, 1524, 1523, 1521, 24,
	3, 4, 7, 10, 2, 20, 12, 1520, 1519, 137,
	94, 1518, 146, 1517, 1515, 40, 1514, 1510, 25, 1509,
	15, 1506, 8, 1, 1501, 139, 1500, 99, 1499, 1430,
	1498, 145, 1497, 1495, 1461, 83,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 39, 39, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 36, 36, 41, 41, 41, 40,
	40, 35, 35, 5, 5, 5, 5, 10, 11, 11,
	11, 11, 11, 11, 80, 80, 79, 79, 82, 82,
	12, 12, 13, 13, 13, 13, 13, 13, 13, 13,
	168, 168, 167, 14, 143, 143, 15, 15, 15, 15,
	16, 103, 103, 17, 17, 17, 17, 18, 22, 235,
	235, 235, 239, 239, 240, 240, 241, 241, 241, 241,
	241, 241, 241, 237, 237, 25, 25, 25, 25, 25,
	122, 118, 118, 120, 120, 120, 120, 44, 117, 117,
	117, 117, 119, 119, 119, 119, 192, 190, 190, 197,
	197, 197, 57, 57, 57, 57, 57, 58, 58, 58,
	189, 189, 189, 189, 198, 198, 198, 198, 198, 198,
	59, 59, 59, 196, 196, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 191, 191, 236, 236, 238, 238, 8, 8, 9,
	9, 60, 60, 61, 61, 125, 125, 125, 125, 62,
	62, 124, 207, 207, 208, 208, 208, 208, 208, 208,
	209, 209, 209, 209, 209, 209, 209, 205, 205, 206,
	203, 203, 204, 204, 204, 204, 242, 242, 123, 123,
	65, 65, 212, 212, 212, 212, 210, 210, 210, 210,
	210, 213, 211, 214, 214, 214, 214, 214, 154, 154,
	154, 28, 7, 7, 107, 107, 69, 69, 158, 158,
	158, 70, 70, 159, 51, 51, 37, 37, 37, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 108, 108,
	109, 109, 20, 24, 27, 27, 27, 27, 27, 244,
	244, 48, 48, 48, 48, 49, 49, 121, 121, 121,
	121, 121, 43, 6, 6, 42, 42, 19, 19, 19,
	19, 19, 54, 54, 114, 114, 114, 116, 116, 115,
	115, 115, 93, 93, 29, 75, 75, 84, 84, 85,
	85, 165, 86, 86, 23, 23, 32, 32, 30, 30,
	30, 30, 30, 30, 31, 31, 33, 33, 33, 33,
	33, 33, 33, 220, 220, 220, 222, 222, 219, 221,
	221, 243, 243, 94, 94, 94, 64, 63, 63, 67,
	67, 66, 68, 68, 157, 91, 91, 91, 91, 110,
	111, 111, 112, 112, 113, 113, 90, 90, 140, 140,
	34, 34, 74, 74, 76, 76, 131, 131, 132, 132,
	130, 130, 130, 160, 160, 160, 160, 161, 161, 161,
	161, 161, 161, 155, 155, 155, 155, 156, 156, 166,
	166, 97, 97, 97, 97, 95, 95, 96, 96, 162,
	162, 162, 162, 92, 92, 163, 163, 163, 126, 126,
	169, 169, 169, 73, 73, 73, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 171,
	171, 171, 171, 173, 173, 173, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 174,
	174, 181, 181, 182, 182, 183, 184, 175, 175, 176,
	176, 177, 178, 185, 185, 185, 185, 187, 187, 179,
	179, 179, 179, 179, 180, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 105,
	105, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	215, 215, 215, 215, 215, 215, 215, 217, 217, 218,
	218, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 223, 223, 224,
	224, 225, 225, 226, 226, 228, 229, 229, 229, 230,
	234, 234, 227, 227, 231, 231, 231, 232, 232, 233,
	233, 233, 233, 233, 145, 145, 145, 146, 146, 147,
	81, 81, 142, 142, 141, 141, 141, 144, 144, 98,
	186, 186, 186, 186, 186, 186, 186, 99, 99, 106,
	100, 100, 101, 101, 101, 101, 101, 101, 137, 138,
	102, 102, 102, 139, 139, 148, 152, 152, 151, 150,
	150, 149, 149, 129, 129, 129, 129, 128, 127, 87,
	87, 245, 245, 153, 153, 88, 88, 89, 83, 83,
	164, 164, 164, 164, 77, 77, 56, 56, 78, 78,
	52, 52, 55, 53, 53, 53, 53, 71, 71, 72,
	72, 50, 50, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 188, 188, 188, 45, 45, 45,
	46, 46, 47, 47, 194, 194, 194, 195, 195, 195,
	195, 193, 193, 193, 193, 193, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 1, 3, 1, 2, 2, 3,
	2, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 5, 3, 0, 1, 1, 1, 1,
	3, 3, 0, 2, 3, 2, 3, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 3, 6, 3, 1,
	5, 2, 1, 1, 1, 3, 3, 2, 3, 3,
	3, 3, 1, 3, 3, 2, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 0, 1, 1, 2, 2, 4, 2, 4,
	4, 4, 4, 4, 4, 3, 3, 4, 3, 2,
	4, 2, 0, 2, 0, 2, 0, 7, 10, 5,
	8, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 11, 14, 1, 0, 1, 3, 3, 3,
	5, 1, 3, 1, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 1, 3,
	3, 0, 3, 4, 7, 3, 0, 6, 6, 8,
	5, 7, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 0, 8, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 1, 1, 8, 8, 1, 2,
	4, 4, 4, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 3, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	1, 3, 1, 1, 1, 2, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 6, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 1, 1, 3, 5, 2, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 2, 2, 1, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 3,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -10, -11, -12, -14,
	-16, -17, -18, -19, -21, -22, -24, -23, -25, -26,
	-27, -20, -28, -29, 22, -6, -7, -8, -9, -221,
	90, 98, 190, 97, 83, 113, 204, 211, -30, -32,
	219, -122, 220, 33, 228, 57, 93, 206, 201, 248,
	64, -220, -33, -31, 294, 269, 275, 214, -34, 235,
	262, 297, 235, 76, 126, 85, 130, 256, 255, 76,
	126, 235, -13, 294, -23, -5, -11, -4, -19, -29,
	-10, -12, 22, -45, 4, -199, -201, 19, 20, 22,
	32, 33, 38, 42, 45, 56, 57, 58, 60, 62,
	63, 66, 67, 74, 75, 76, 77, 79, 83, 85,
	89, 90, 92, 97, 98, 103, 104, 107, 109, 114,
	119, 120, 127, 130, 125, 138, 140, 141, 146, 149,
	152, 154, 155, 156, 157, 158, 160, 161, 163, 165,
	162, 168, 170, 171, 177, 180, 183, 184, 185, 188,
	190, 192, 193, 194, 196, 197, 201, 199, 200, 202,
	204, 206, 207, 209, 211, 212, 213, 216, 217, 219,
	220, 222, 225, 227, 228, 231, 229, 234, 236, 237,
	244, 248, 249, 250, 251, 254, 255, 256, 259, 260,
	261, 265, 270, 271, 272, 273, 27, 34, 35, 36,
	37, 39, 40, 43, 44, 48, 49, 50, 52, 78,
	80, 81, 96, 99, 105, 115, 117, 121, 122, 131,
	132, 133, 135, 144, 167, 169, 178, 182, 187, 189,
	195, 208, 215, 223, 224, 230, 232, 239, 240, 241,
	245, 246, 262, 263, -45, -45, 190, 21, -239, 21,
	-240, -241, 64, 90, 113, 214, 130, 85, 255, -239,
	-49, 211, -45, -118, 149, 217, 208, 244, -119, -117,
	-192, 239, 158, -79, -45, 4, 76, 56, 77, 114,
	126, 127, 61, 62, 141, 236, 239, 244, 21, 64,
	-244, 244, 244, -244, -244, -48, 244, 242, -49, -243,
	235, 235, -107, 76, 253, -31, -33, -32, -66, -67,
	252, 134, 95, 176, -30, -32, -220, -222, 196, -219,
	-45, -222, -63, -64, 21, 87, 298, -162, -52, 174,
	-45, -89, 294, -3, -162, 121, -45, -55, 121, -52,
	111, 136, 136, -163, -162, -45, 121, -56, 121, -55,
	-80, 121, -79, -168, -167, -195, 4, -199, -201, -200,
	262, 54, 65, 112, 129, 123, 137, 139, 145, 147,
	159, 179, 181, 205, 221, 235, -143, 294, -103, 294,
	-45, 21, 173, 298, 173, -45, -118, 50, -118, 294,
	-120, -43, -44, 138, 192, 242, 279, 111, 273, -59,
	5, 82, -82, 296, 111, -236, 173, 111, 111, 111,
	111, 111, -191, 111, 273, 138, 192, 235, -121, -43,
	-44, -121, 242, -49, -92, -162, -79, 121, 126, -45,
	121, -66, -67, -91, -110, -111, 148, 172, -94, 21,
	87, -94, -94, 42, 295, 295, 298, -222, -72, 294,
	-83, -164, -133, 287, -135, 285, 286, 291, 164, 274,
	-145, -52, -136, 9, 294, -148, -217, -32, 96, 28,
	-146, -147, 208, -45, 7, 8, 5, 6, -50, -171,
	-180, 247, 100, 166, 46, -215, -216, 4, -199, -194,
	-172, -182, -176, -179, 135, 54, 69, 72, 70, 73,
	218, 257, 47, 27, 99, 182, 187, 232, 245, 246,
	121, 167, 122, 52, 115, 144, 89, 35, 37, 39,
	40, 48, 49, 78, 80, 81, 105, 131, 132, 133,
	169, 195, 223, 230, 240, 241, 263, -200, -183, -184,
	-177, -178, -185, -83, -89, 287, -52, 294, -87, -129,
	-128, -127, 292, 296, -88, -153, -133, 82, -39, 199,
	-38, 20, 22, 90, 260, 96, 199, 199, 96, 299,
	-163, -54, -52, -54, 219, -45, 29, 96, -41, 298,
	45, 202, 96, -41, 298, 96, 295, 298, -162, 121,
	29, -142, -169, -170, -172, -181, -175, -179, -180, 38,
	44, 43, 237, 215, 224, 36, 131, 132, 133, 223,
	35, 195, 105, 89, 81, 80, 169, 40, 39, -183,
	-184, -177, -178, 78, 240, 241, 135, 37, 49, 48,
	263, 230, -81, -133, -235, -78, 235, 76, -53, -45,
	287, -241, -235, 29, -81, 298, 298, 146, -58, 152,
	163, 119, -190, 82, -197, -189, -154, 9, 247, 100,
	173, -196, 8, 286, -188, -195, 5, 7, 285, -190,
	82, 67, -198, 5, 4, -180, -154, 82, 149, 296,
	-193, 4, -199, -201, -200, -202, 21, 23, 24, 25,
	26, 28, 29, 30, 31, 41, 46, 47, 51, 53,
	55, 61, 64, 68, 69, 70, 71, 72, 73, 82,
	84, 86, 87, 88, 91, 93, 95, 100, 101, 102,
	108, 110, 111, 113, 116, 118, 124, 126, 128, 134,
	136, 142, 143, 148, 150, 151, 164, 166, 172, 173,
	174, 175, 176, 186, 191, 198, 203, 214, 218, 226,
	233, 235, 238, 242, 243, 247, 252, 253, 257, 258,
	264, 266, 267, 268, 269, -192, -238, 108, -235, -192,
	-192, -192, -192, -192, -192, 146, -192, 298, 298, -49,
	-41, 298, 294, 29, 164, -46, 121, -45, -42, 92,
	164, -91, -111, -110, -112, -133, 21, -133, -135, -31,
	-31, -31, -68, -157, -133, -219, 29, -71, -45, -74,
	298, 111, 10, 53, 32, 285, 286, 287, 288, 106,
	289, 282, 283, 284, 281, 277, 278, 279, 59, 153,
	210, 12, 13, 14, 25, 175, 147, 274, 123, 221,
	291, 15, 16, 17, 137, 34, 124, 29, 4, -133,
	-133, -133, -133, -133, 181, -32, -133, -81, -87, -32,
	-141, 292, 294, -87, 294, 5, 5, 294, -149, -133,
	-223, 270, 108, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 189,
	-187, 265, -187, -187, -173, 294, -173, -174, 294, -173,
	271, 275, 294, -74, -52, -129, -133, -193, 287, 298,
	295, 298, 242, -108, 61, 55, -124, 121, 55, -203,
	-45, 61, -204, 51, 253, 191, 110, -108, 61, -108,
	61, 61, -162, 242, 242, -55, -45, -126, 267, -114,
	-23, 294, 82, 29, -114, -84, -85, -165, -86, -52,
	294, -45, -45, -55, -56, -79, -80, -13, -167, 96,
	-15, -23, -19, -29, -10, 295, 298, -73, 28, -104,
	294, 272, 156, 79, 120, 155, -105, 213, 295, 298,
	242, 298, -78, -71, -128, -127, 111, 244, 295, -44,
	-43, -57, 194, 225, 200, 216, 298, 8, 7, 7,
	5, -193, -237, -45, -44, -43, -162, -60, -61, -125,
	-124, -205, -206, -203, 126, 253, 101, -23, 96, 173,
	164, 279, 96, -113, 208, 209, 298, -37, 30, 86,
	294, 298, 295, -126, -164, -76, -160, -162, -32, -161,
	294, -169, -79, 239, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, 147, 123, 221, 34,
	124, -133, 242, -133, -133, -133, -133, 166, 164, 247,
	100, 254, 87, 170, -245, 233, 31, -139, -32, 294,
	-193, -145, 208, 294, 295, 298, -81, -144, 293, -141,
	-81, 295, 295, -81, 264, 21, 87, 287, -104, 7,
	-152, -151, 266, -224, 103, 116, 294, 295, 295, -133,
	-133, -98, -186, 4, 272, 156, 79, 120, 155, 213,
	-99, -133, -100, -134, -135, 285, 286, 291, 294, 208,
	-101, -133, -81, -133, 41, 143, 243, -102, -133, 111,
	-81, -133, -133, -133, -81, -81, -81, 294, 7, 7,
	239, 239, 7, -126, 295, 293, 302, -153, -38, -52,
	-45, -45, 164, -124, 121, -169, -45, 294, 294, 140,
	140, -45, -45, 121, -45, 121, -45, -45, -39, 199,
	-45, -45, 199, -93, 203, -133, -93, -116, 173, -77,
	-52, 262, -45, 203, -75, 298, 111, 279, -77, -41,
	-41, -162, -169, 292, 292, 7, 242, 242, 242, 242,
	294, -133, -237, -53, -237, -43, 251, 58, 194, -197,
	-104, 298, 295, 298, -46, 126, -46, -79, -52, 96,
	5, -45, -157, -15, -45, -90, 116, -166, 298, 276,
	65, -97, 139, 159, 112, 145, 205, 129, -130, 299,
	-156, -155, 29, -45, -32, -161, -160, 273, -133, -133,
	242, -245, 233, -139, -133, 166, 247, 100, 254, 87,
	170, 111, 294, -134, -134, -81, 294, -81, -133, 293,
	293, 298, 295, -67, 298, -66, -133, -81, -81, 295,
	295, -150, -151, 91, -133, -229, 180, 294, 294, -133,
	29, 298, 295, 111, 295, -106, 186, 295, 10, 285,
	286, 287, 288, 106, 289, 282, 283, 284, 281, 277,
	278, 279, 59, 153, 210, 12, 13, 14, 137, 124,
	-134, -134, -134, -81, 294, 295, -137, -138, 111, 108,
	29, -102, -102, -102, 295, 111, -81, 298, 298, 298,
	295, 295, 295, 7, 295, 298, 295, 273, 273, 295,
	-90, -133, 242, 242, 96, 164, -207, -204, -133, -71,
	294, 294, -36, 90, 219, -109, 96, -41, 96, -41,
	242, -108, 61, 242, -83, 203, 60, 295, 298, -83,
	-126, -85, -76, -153, 295, 293, 7, 7, 295, 156,
	120, 155, -105, 155, -105, -105, 7, -45, -62, 125,
	-125, 294, -46, 294, 294, 29, 294, -45, -42, 295,
	-140, 118, 42, -160, 170, 139, 139, -160, -97, 139,
	-95, 179, -95, -95, -156, -193, 300, -45, 294, 295,
	-133, -133, -134, -134, 111, 294, -133, -142, 25, 25,
	295, -81, 295, 298, 295, -141, 295, 264, -67, -67,
	-67, 5, 93, -133, 238, -230, -45, 294, 267, -66,
	295, -169, -169, -133, -137, -133, -169, -134, -134, -134,
	-134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
	-134, -134, -134, -134, -134, -134, 87, 164, 170, -134,
	298, -81, 295, -138, -137, -133, -133, -169, 295, 295,
	295, -81, -133, -133, -133, 295, 7, -140, 293, -45,
	-45, -124, 96, -208, 61, -209, 53, 101, 64, 164,
	166, 253, 191, 51, 82, 198, 295, 295, -71, -71,
	164, 82, 164, 82, 75, 249, -45, -45, -52, -45,
	-45, -45, -83, -115, 294, 173, -23, -52, -93, 279,
	293, 293, 295, 124, -69, -158, -45, -218, 294, -215,
	-216, -50, 294, -70, -159, -45, -60, -23, -69, 173,
	-225, 268, -133, -81, 234, -160, -160, -96, 258, 173,
	139, -160, -132, -131, 109, 162, 294, -71, -155, 25,
	25, -133, -142, 295, -133, -133, 295, -133, 5, -133,
	295, 295, 295, -133, -234, -45, -133, 295, 295, 295,
	-138, 111, 87, 170, 294, -133, 295, 295, 298, 295,
	295, 295, -225, -124, -45, -79, -45, 101, 121, 166,
	140, 294, -134, -52, -123, -242, 63, 231, 295, 295,
	166, 166, -133, -169, -41, -41, 242, 242, 88, -71,
	61, -89, -32, 294, 183, 295, 298, -51, -87, 53,
	-51, -133, 294, -69, 295, 298, 295, 295, -52, -226,
	-228, -45, 239, -96, 294, -133, -160, 298, 301, 279,
	-71, 295, -133, -133, 295, 295, -67, -227, 185, 295,
	-134, 111, 294, -142, 295, -133, -209, -46, 164, -133,
	-47, 294, -62, 294, 198, -40, 53, -45, -45, 255,
	165, 295, -45, -45, -123, -158, -37, -79, -37, 295,
	-81, 295, -159, -62, -123, 294, 298, 29, 5, -71,
	-131, -193, 295, 295, -67, 42, -134, -142, 295, 295,
	96, 295, -212, 154, -45, -71, -52, -35, 258, -79,
	219, -126, 294, -62, -51, -67, -123, -62, -69, -228,
	-230, 295, -231, 193, 209, -81, 295, 101, -210, -213,
	-211, 173, 112, 184, 222, 295, 295, -65, 294, -133,
	-84, -71, -37, 295, -62, 295, 295, -232, -233, 34,
	250, 67, -133, -232, -45, -211, 173, -213, 173, 255,
	85, -212, -71, -126, 295, -123, -233, 188, 107, 208,
	188, 107, -214, 161, 202, 45, 219, -214, -210, 295,
	-41, -62, 25, 19, 166, 82, -233,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 56, 0,
	0, 360, 0, 0, 0, 0, 0, 0, 334, -2,
	0, 119, 0, 290, 0, 290, 290, 294, 0, 362,
	255, 359, -2, 370, 0, 0, 0, 368, 348, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 0, 72, 73, 74, 75, 76, 77,
	78, 79, 0, 85, 787, 788, 789, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 92, 93, 869, 95, 0, 102,
	103, 104, 106, 107, 108, 109, 110, 111, 112, 0,
	283, 883, 296, 115, 848, 887, 950, 899, 122, 132,
	0, 956, -2, 136, 66, 165, 166, 0, 168, 184,
	0, 0, 0, 0, 0, 182, 0, 0, 179, 0,
	301, 289, 301, 286, 287, 288, 291, 0, 282, 0,
	361, 0, 0, 0, 254, -2, 344, 345, -2, 0,
	365, 365, 365, 0, 0, 345, 0, 353, 873, 356,
	770, 354, 0, 0, 367, 366, 0, 349, 429, 0,
	760, 390, 0, 2, 0, 936, 0, 0, 936, 0,
	0, 0, 0, 0, 435, 58, 936, 48, 936, 756,
	48, 936, 64, 0, 80, 82, 797, 798, 799, 800,
	961, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 0, 0, 0, 90, 0,
	94, 96, 0, 0, 0, 295, 116, 926, 118, 0,
	121, 123, 124, 0, 0, 0, 0, 0, 0, 135,
	160, 161, 67, 0, 0, 186, 0, 0, 0, 0,
	0, 0, 175, 0, 176, 0, 178, 0, 284, 297,
	298, 285, 0, 293, 48, 433, 0, 936, 791, 306,
	936, -2, 0, 340, 377, 378, 0, 0, 0, 363,
	364, 0, 0, 0, 336, 337, 0, 355, 0, 0,
	393, 748, 752, 753, 521, 0, 0, 0, 0, 0,
	0, 608, 609, 610, 0, 612, 613, 614, 931, 0,
	618, 619, 950, 760, 773, 774, 775, 776, 0, 0,
	0, 781, 782, 783, 732, 658, 628, -2, -2, 771,
	459, 460, 461, 462, -2, 963, 632, 634, 636, 637,
	638, 639, 0, 915, 932, 946, 947, 955, 959, 960,
	936, 943, 937, 927, 934, 942, 829, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 796, 483, 484,
	489, 490, 492, 393, 391, 430, 431, 0, 761, 739,
	733, 734, 0, 0, 0, 745, 743, 744, 25, 279,
	27, 0, 279, 279, 0, 0, 0, 0, 0, 0,
	439, 0, 312, 0, 0, 436, 0, 0, 60, 0,
	46, 47, 0, 62, 0, 0, 360, 0, 0, 936,
	360, 0, 692, 445, 446, 447, 448, 449, 518, 452,
	453, 454, 455, 456, 457, 458, 466, 467, 468, 469,
	470, 471, 480, 0, 465, 465, 465, 477, 478, 481,
	482, 487, 488, 499, 500, 502, 504, 498, 498, 498,
	495, 496, 0, 690, 0, 99, 0, 824, 758, 763,
	766, 105, 0, 0, 0, 0, 0, 0, 127, 147,
	148, 149, 128, 130, 137, 139, 140, 141, 150, 151,
	152, 153, 248, 0, 250, 163, 164, 784, 0, 129,
	131, 133, 134, 154, 155, 0, 157, 158, 159, 0,
	68, 801, 802, 803, 804, 805, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 167, 169, 0, 183, 170,
	171, 172, 173, 174, 181, 177, 180, 0, 0, 292,
	251, 0, 192, 0, 0, 0, 936, 790, 303, 0,
	0, 343, 375, 376, 379, 382, 383, 380, 521, 350,
	351, 352, 371, 372, 268, 357, 0, 0, 767, 439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 742, 0, 0, 751, 525,
	526, 527, 549, 550, 0, -2, 690, 0, 615, 616,
	617, 0, 0, -2, 0, 778, 518, 0, 0, 731,
	660, 0, 0, 0, 0, 0, 0, 0, 0, 711,
	717, 0, 0, 0, 0, 0, 0, 0, 0, 473,
	486, 497, 494, 493, 475, 0, 474, 472, 0, 476,
	0, 0, 0, 439, 0, 740, 0, 737, 738, 0,
	747, 0, 0, 0, 0, 278, 29, 936, 0, 39,
	0, 0, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 762, 323, 0, 323,
	314, 0, 0, 0, 310, 326, 327, 329, 330, 0,
	0, 437, 59, 757, 48, 65, 48, 71, 81, 0,
	83, 86, 87, 88, 89, 84, 0, 440, 442, 450,
	0, 505, 506, 507, 508, 509, 510, 519, 91, 0,
	0, 0, 100, 101, 764, 765, 0, 0, 120, 125,
	126, 302, 0, 144, 0, 146, 0, 249, 786, 785,
	518, 69, 185, 113, 299, 300, 434, 0, 191, 193,
	195, 196, 197, 198, 791, 0, 791, 189, 0, 0,
	0, 0, 0, 381, 384, 385, 0, 374, 266, 267,
	360, 0, 769, 387, 749, 420, 394, 402, 418, 405,
	0, 522, 523, 0, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 537, -2, -2, -2, 541, 542, 543,
	-2, -2, -2, 547, 548, -2, 0, 0, 0, 742,
	0, -2, 0, 557, -2, -2, -2, 561, 0, 564,
	566, 568, 0, 0, 0, 0, 741, 578, 723, 0,
	750, 563, 0, 0, 611, 0, 0, 0, 696, 697,
	0, -2, 620, 370, 0, 0, 0, 0, 779, 0,
	730, 726, 0, 668, 0, 0, 0, 633, 635, 0,
	0, 0, 0, 700, 701, 702, 703, 704, 705, 706,
	0, 0, 0, 0, 580, 0, 0, 0, 0, 950,
	0, 690, 716, 0, 0, 0, 0, 0, 690, 0,
	722, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 387, 432, 735, 0, 746, 28, 270,
	0, 0, 0, 31, 936, 203, 0, 0, 0, 0,
	0, 281, 40, 936, 48, 936, 48, 41, 26, 279,
	269, 272, 0, 57, 0, 438, 307, 308, 0, 0,
	754, 316, 313, 0, 439, 0, 0, 0, 0, 61,
	63, 0, 693, 0, 0, 0, 0, 0, 0, 0,
	0, 691, 97, 759, 98, 117, 142, 143, 145, 138,
	156, 0, 200, 0, 0, 791, 0, 0, 0, 0,
	305, 306, 373, 0, 768, 389, 0, 392, 0, 0,
	0, 0, 0, 0, 426, 426, 426, 424, 418, 0,
	404, 417, 0, 416, -2, 405, 0, 0, -2, -2,
	0, 0, 0, 579, -2, 562, 565, 567, 569, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 691, 694,
	695, 0, -2, 0, 0, 369, 370, 370, 370, 626,
	0, 0, 727, 0, 0, 627, 0, 0, 0, 0,
	0, 0, 642, 0, 643, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 583, 584, 0, 0, 645, 714, 715, 0, 0,
	0, 0, 0, 0, 650, 0, 721, 0, 0, 0,
	654, 655, 656, 0, 463, 0, 479, 501, 503, 491,
	389, 0, 0, 0, 0, 0, 201, 220, 0, 0,
	0, 0, 33, 0, 0, 0, 0, 37, 0, 43,
	0, 0, 0, 0, 322, 0, 321, 0, 0, 311,
	323, 328, 325, 331, 0, 443, 0, 0, 451, 511,
	512, 513, 514, 515, 516, 517, 0, 114, 187, 0,
	194, 0, 0, 0, 192, 0, 0, 0, 304, 358,
	662, 0, 0, 395, 0, 0, 0, 0, 0, 0,
	421, 425, 422, 423, 403, 400, 0, 414, 0, 407,
	524, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	724, 0, 685, 0, -2, 698, 621, 0, 0, 0,
	0, 780, 725, 729, 0, 666, 667, 671, 0, 0,
	631, 0, 0, 699, 708, 709, 581, 585, 586, 587,
	588, 589, 590, 591, 592, 593, 594, -2, -2, -2,
	598, 599, 600, -2, -2, -2, 0, 0, 0, 710,
	0, 0, 688, 712, 713, 718, 719, 0, 647, 648,
	649, 720, 0, 0, 0, 485, 0, 662, 736, 274,
	276, 30, 0, 202, 0, 205, 0, 0, 0, 0,
	211, 212, 0, 0, 0, 0, 222, 229, 0, 0,
	0, 45, 0, 0, 280, 0, 48, 48, 271, 0,
	0, 273, 309, 0, 0, 0, 315, 755, 324, 0,
	444, 441, 520, 0, 0, 256, 265, 265, 0, 629,
	630, 0, 0, 0, 261, 263, 0, 190, 0, 0,
	346, 0, 388, 386, 0, 408, 0, 410, 0, 0,
	0, 412, 0, 398, 0, 397, 0, 0, 406, 0,
	0, -2, 0, 572, -2, -2, 684, 691, 777, 370,
	622, 624, 625, 728, 673, 670, 0, 657, 640, 641,
	707, 0, 0, 0, 0, 691, 687, 646, 0, 652,
	653, 464, 347, 32, 0, 206, 207, 791, 0, 210,
	213, 0, 215, 793, 200, 0, 226, 227, 224, 0,
	34, 35, 44, 50, 36, 42, 0, 0, 0, 0,
	0, 332, 333, 0, 0, 229, 0, 268, 772, 0,
	268, 0, 0, 0, 219, 0, 200, 229, 0, 661,
	663, 0, 0, 409, 0, 428, 411, 0, 401, 0,
	0, 415, -2, -2, 573, 686, 0, 370, 0, 659,
	-2, 0, 0, 0, 689, 0, 204, 208, 0, 0,
	235, 0, 223, 0, 0, 52, 0, 275, 277, 0,
	318, 439, 320, 0, 200, 257, 258, 264, 259, 265,
	370, 229, 262, 188, 200, 0, 0, 0, 419, 0,
	399, 396, 413, 623, 676, 0, -2, 0, 606, 651,
	0, 214, 240, 0, 0, 0, 231, 38, 0, 49,
	0, 319, 0, 217, 268, 0, 200, 252, 0, 664,
	665, 427, 0, 0, 0, 672, 607, 0, 216, 236,
	237, 0, 232, 233, 234, 792, 228, 235, 0, 51,
	439, 0, 260, 621, 218, 229, 669, 674, 677, -2,
	902, 821, 0, 675, 209, 238, 0, 239, 0, 0,
	0, 240, 0, 317, 48, 200, 0, 679, 680, 681,
	682, 683, 241, 0, 244, 245, 0, 242, 225, 230,
	199, 253, 0, 243, 246, 247, 678,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 283, 3, 289, 284, 3,
	294, 295, 287, 285, 298, 286, 296, 288, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 302, 297,
	277, 279, 278, 3, 299, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 292, 3, 293, 282, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 300, 281, 301, 291,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 280,
	57620, 290, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:703
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:709
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:715
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:738
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:754
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:758
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:768
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:800
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:804
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:822
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:825
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:829
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:831
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:834
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:876
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:877
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:880
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:881
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:924
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:984
		{ /* SKIP DOC */
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 85:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 92:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.qnames()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.qnames()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1109
		{
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{ /* SKIP DOC */
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			unimplemented()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1252
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = Low
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = Normal
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = High
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1344
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			unimplemented()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1365
		{
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = []string(nil)
		}
	case 187:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfAsExists: false, IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), Rows: nil}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfAsExists: false, IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), Rows: nil}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfAsExists: true, IfNotExists: false, Interleave: nil, Defs: nil, Rows: sqlDollar[5].union.slct()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfAsExists: true, IfNotExists: true, Interleave: nil, Defs: nil, Rows: sqlDollar[8].union.slct()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1527
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       &QualifiedName{Base: Name(sqlDollar[4].str)},
				Fields:       sqlDollar[6].union.strs(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1564
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.strs(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.strs(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing:    sqlDollar[5].union.strs(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.qname(),
				FromCols: sqlDollar[4].union.strs(),
				ToCols:   sqlDollar[8].union.strs(),
			}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = []string(nil)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = []string(nil)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1738
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1739
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1740
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1741
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1748
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1749
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1751
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1752
		{
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1755
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1758
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1761
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1762
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1763
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1764
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.qname(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.strs(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = true
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = false
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1842
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1843
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			unimplemented()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1863
		{
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = Ascending
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = Descending
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = true
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = false
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1930
		{
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1972
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1973
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.str = ""
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.str = ""
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2067
		{
			unimplementedWithIssue(6637)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2074
		{
			unimplementedWithIssue(6637)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2116
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			unimplemented()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = []string(nil)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			unimplementedWithIssue(7841)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2146
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}}},
				tableSelect: true,
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2371
		{
			unimplemented()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2372
		{
			unimplemented()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2373
		{
			unimplemented()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2376
		{
			unimplemented()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			unimplemented()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2380
		{
			unimplemented()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2383
		{
			unimplemented()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2384
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2387
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2388
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = true
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = false
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = false
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = true
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2411
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2412
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2450
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2470
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2511
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2512
		{
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2562
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = &From{}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2610
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.str = astFullJoin
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.str = astLeftJoin
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.str = astRightJoin
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.str = astInnerJoin
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2756
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2757
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2847
		{
			unimplementedWithIssue(2115)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2848
		{
			unimplementedWithIssue(2115)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2851
		{
			unimplementedWithIssue(2115)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2852
		{
			unimplementedWithIssue(2115)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2853
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2861
		{
			unimplemented()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2917
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = nil
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2962
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3034
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3061
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3100
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3101
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3132
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3134
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3135
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3136
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3137
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3138
		{
			unimplemented()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3140
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3141
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3142
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3144
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3145
		{
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3148
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3149
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3181
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3182
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3342
		{
			unimplemented()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3594
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3595
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3631
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3632
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3636
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3653
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3655
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3656
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3681
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3725
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3726
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3729
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3730
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3734
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3735
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3738
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3739
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3745
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3746
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3747
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3751
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3762
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3763
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3766
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3767
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3775
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3776
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3777
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3780
		{
			unimplemented()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3781
		{
			unimplemented()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3787
		{
			unimplemented()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3788
		{
			unimplemented()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3789
		{
			unimplemented()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3790
		{
			unimplemented()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3791
		{
			unimplemented()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4119
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4120
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4276
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4312
		{
			unimplemented()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = DNull
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.str = ""
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
